{
    "docs": [
        {
            "location": "/", 
            "text": "Siddhi Execution Streaming ML\n\n\n\n  \n\n  \n\n  \n\n  \n\n  \n\n\nThe \nsiddhi-execution-streamingml extension\n is a \nSiddhi\n extension that provides streaming machine learning (clustering, classification and regression) on event streams.\n\n\nFor information on \nSiddhi\n and it's features refer \nSiddhi Documentation\n. \n\n\nDownload\n\n\n\n\nVersions 2.x and above with group id \nio.siddhi.extension.*\n from \nhere\n.\n\n\nVersions 1.x and lower with group id \norg.wso2.extension.siddhi.*\n from \nhere\n.\n\n\n\n\nLatest API Docs\n\n\nLatest API Docs is \n2.0.2\n.\n\n\nFeatures\n\n\n\n\nbayesianClassification\n \n(\nStream Processor\n)\n \nThis extension predicts using a Bayesian multivariate logistic regression model. This Bayesian model allows determining the uncertainty of each prediction by estimating the full-predictive distribution\n\n\nbayesianRegression\n \n(\nStream Processor\n)\n \nThis extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution\n\n\nkMeansIncremental\n \n(\nStream Processor\n)\n \nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm \n\n\nkMeansMiniBatch\n \n(\nStream Processor\n)\n \nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). \n\n\nperceptronClassifier\n \n(\nStream Processor\n)\n \nThis extension predicts using a linear binary classification Perceptron model.\n\n\nupdateBayesianClassification\n \n(\nStream Processor\n)\n \nThis extension train a Bayesian multivariate logistic regression model. We can use this model for multi-class classification. This extension uses an improved version of stochastic variational inference.\n\n\nupdateBayesianRegression\n \n(\nStream Processor\n)\n \nThis extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference.\n\n\nupdatePerceptronClassifier\n \n(\nStream Processor\n)\n \nThis extension builds/updates a linear binary classification Perceptron model.\n\n\n\n\nDependencies\n\n\nThere are no other dependencies needed for this extension. \n\n\nInstallation\n\n\nFor installing this extension on various siddhi execution environments refer Siddhi documentation section on \nadding extensions\n.\n\n\nSupport and Contribution\n\n\n\n\n\n\nWe encourage users to ask questions and get support via \nStackOverflow\n, make sure to add the \nsiddhi\n tag to the issue for better response.\n\n\n\n\n\n\nIf you find any issues related to the extension please report them on \nthe issue tracker\n.\n\n\n\n\n\n\nFor production support and other contribution related information refer \nSiddhi Community\n documentation.", 
            "title": "Information"
        }, 
        {
            "location": "/#siddhi-execution-streaming-ml", 
            "text": "The  siddhi-execution-streamingml extension  is a  Siddhi  extension that provides streaming machine learning (clustering, classification and regression) on event streams.  For information on  Siddhi  and it's features refer  Siddhi Documentation .", 
            "title": "Siddhi Execution Streaming ML"
        }, 
        {
            "location": "/#download", 
            "text": "Versions 2.x and above with group id  io.siddhi.extension.*  from  here .  Versions 1.x and lower with group id  org.wso2.extension.siddhi.*  from  here .", 
            "title": "Download"
        }, 
        {
            "location": "/#latest-api-docs", 
            "text": "Latest API Docs is  2.0.2 .", 
            "title": "Latest API Docs"
        }, 
        {
            "location": "/#features", 
            "text": "bayesianClassification   ( Stream Processor )   This extension predicts using a Bayesian multivariate logistic regression model. This Bayesian model allows determining the uncertainty of each prediction by estimating the full-predictive distribution  bayesianRegression   ( Stream Processor )   This extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution  kMeansIncremental   ( Stream Processor )   Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm   kMeansMiniBatch   ( Stream Processor )   Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.).   perceptronClassifier   ( Stream Processor )   This extension predicts using a linear binary classification Perceptron model.  updateBayesianClassification   ( Stream Processor )   This extension train a Bayesian multivariate logistic regression model. We can use this model for multi-class classification. This extension uses an improved version of stochastic variational inference.  updateBayesianRegression   ( Stream Processor )   This extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference.  updatePerceptronClassifier   ( Stream Processor )   This extension builds/updates a linear binary classification Perceptron model.", 
            "title": "Features"
        }, 
        {
            "location": "/#dependencies", 
            "text": "There are no other dependencies needed for this extension.", 
            "title": "Dependencies"
        }, 
        {
            "location": "/#installation", 
            "text": "For installing this extension on various siddhi execution environments refer Siddhi documentation section on  adding extensions .", 
            "title": "Installation"
        }, 
        {
            "location": "/#support-and-contribution", 
            "text": "We encourage users to ask questions and get support via  StackOverflow , make sure to add the  siddhi  tag to the issue for better response.    If you find any issues related to the extension please report them on  the issue tracker .    For production support and other contribution related information refer  Siddhi Community  documentation.", 
            "title": "Support and Contribution"
        }, 
        {
            "location": "/api/latest/", 
            "text": "API Docs - v2.0.2\n\n\n\n\nTested Siddhi Core version: \n5.0.2\n\n\nIt could also support other Siddhi Core minor versions.\n\n\n\n\nStreamingml\n\n\nbayesianClassification \n(Stream Processor)\n\n\nThis extension predicts using a Bayesian multivariate logistic regression model. This Bayesian model allows determining the uncertainty of each prediction by estimating the full-predictive distribution\n\n\nSyntax\n\n\nstreamingml:bayesianClassification(\nSTRING\n model.name, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:bayesianClassification(\nSTRING\n model.name, \nINT\n prediction.samples, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nprediction.samples\n\n        \nThe number of samples to be drawn from the predictive distribution. Drawing more samples will improve the accuracy of the predictions\n\n        \n1000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.feature\n\n        \nThe features of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted label (string)\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nconfidence\n\n        \nMean probability of the predictive distribution.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Bayesian Softmax regression model named \nmodel1\n to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted label is emitted to the \nOutputStream\n streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double).\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', 5000, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Bayesian Softmax regression model named \nmodel1\n to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The label is estimated based on 5000 samples from the predictive distribution. The predicted label is emitted to the \nOutputStream\n streamalong with the confidence of the prediction (mean of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double).\n\n\n\nbayesianRegression \n(Stream Processor)\n\n\nThis extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution\n\n\nSyntax\n\n\nstreamingml:bayesianRegression(\nSTRING\n model.name, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:bayesianRegression(\nSTRING\n model.name, \nINT\n prediction.samples, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nprediction.samples\n\n        \nThe number of samples to be drawn to estimate the prediction\n\n        \n1000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.feature\n\n        \nThe features of the model that need to be attributes of the stream\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted value (double)\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nconfidence\n\n        \nInverse of the standard deviation of the predictive distribution\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Bayesian regression model named \nmodel1\n to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted value is emitted to the \nOutputStream\n streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction double, confidence double).\n\n\n\nkMeansIncremental \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm \n\n\nSyntax\n\n\nstreamingml:kMeansIncremental(\nINT\n no.of.clusters, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:kMeansIncremental(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.feature\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user doesnt give the decay rate so the default value will be used\n\n\n\nkMeansMiniBatch \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). \n\n\nSyntax\n\n\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nINT\n maximum.iterations, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nINT\n no.of.events.to.retrain, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nINT\n maximum.iterations, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nINT\n no.of.events.to.retrain, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nINT\n maximum.iterations, \nINT\n no.of.events.to.retrain, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nINT\n maximum.iterations, \nINT\n no.of.events.to.retrain, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmaximum.iterations\n\n        \nNumber of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change\n\n        \n50\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nno.of.events.to.retrain\n\n        \nnumber of events to recalculate cluster centers. \n\n        \n20\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.feature\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user has not specified hyper params. So default values will be used.\n\n\n\nperceptronClassifier \n(Stream Processor)\n\n\nThis extension predicts using a linear binary classification Perceptron model.\n\n\nSyntax\n\n\nstreamingml:perceptronClassifier(\nSTRING\n model.name, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:perceptronClassifier(\nSTRING\n model.name, \nDOUBLE\n model.bias, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:perceptronClassifier(\nSTRING\n model.name, \nDOUBLE\n model.threshold, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:perceptronClassifier(\nSTRING\n model.name, \nDOUBLE\n model.bias, \nDOUBLE\n model.threshold, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.bias\n\n        \nThe bias of the Perceptron algorithm.\n\n        \n0.0\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.threshold\n\n        \nThe threshold that separates the two classes. The value specified must be between zero and one.\n\n        \n0.5\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.feature\n\n        \nThe features of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted value (\ntrue/false\n)\n\n        \nBOOL\n\n    \n\n    \n\n        \nconfidenceLevel\n\n        \nThe probability of the prediction\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias and a \n0.5\n threshold learning rate to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted label (\ntrue/false\n) is emitted to the \nOutputStream\n streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The prediction(\ntrue/false\n) is emitted to the \nOutputStream\nstream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 3\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a default 0.0 bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, and \nattribute_2\n. The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nupdateBayesianClassification \n(Stream Processor)\n\n\nThis extension train a Bayesian multivariate logistic regression model. We can use this model for multi-class classification. This extension uses an improved version of stochastic variational inference.\n\n\nSyntax\n\n\nstreamingml:updateBayesianClassification(\nSTRING\n model.name, \nINT\n no.of.classes, \nSTRING|BOOL\n model.target, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:updateBayesianClassification(\nSTRING\n model.name, \nINT\n no.of.classes, \nSTRING|BOOL\n model.target, \nINT\n model.samples, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:updateBayesianClassification(\nSTRING\n model.name, \nINT\n no.of.classes, \nSTRING|BOOL\n model.target, \nSTRING\n model.optimizer, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:updateBayesianClassification(\nSTRING\n model.name, \nINT\n no.of.classes, \nSTRING|BOOL\n model.target, \nDOUBLE\n learning.rate, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:updateBayesianClassification(\nSTRING\n model.name, \nINT\n no.of.classes, \nSTRING|BOOL\n model.target, \nINT\n model.samples, \nSTRING\n model.optimizer, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:updateBayesianClassification(\nSTRING\n model.name, \nINT\n no.of.classes, \nSTRING|BOOL\n model.target, \nINT\n model.samples, \nDOUBLE\n learning.rate, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:updateBayesianClassification(\nSTRING\n model.name, \nINT\n no.of.classes, \nSTRING|BOOL\n model.target, \nSTRING\n model.optimizer, \nDOUBLE\n learning.rate, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:updateBayesianClassification(\nSTRING\n model.name, \nINT\n no.of.classes, \nSTRING|BOOL\n model.target, \nINT\n model.samples, \nSTRING\n model.optimizer, \nDOUBLE\n learning.rate, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nno.of.classes\n\n        \nNumber of classes to be classified by the model.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.target\n\n        \nThe target attribute (dependant variable) of the input stream.\n\n        \n\n        \nSTRING\nBOOL\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nmodel.samples\n\n        \nNumber of samples used to construct the gradients.\n\n        \n1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.optimizer\n\n        \nThe type of optimization used.\n\n        \nADAM\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the updater.\n\n        \n0.05\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.feature\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nloss\n\n        \nWeight of the \nfeature.name\n of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updateBayesianClassification('model1', 3, attribute_4,attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Bayesian Softmax regression model named \nmodel1\n using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream. This models is capable of classifying 3 classes.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updateBayesianClassification('model1', 2, attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Bayesian Softmax regression model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream. This models act as a binary classifier.\n\n\n\nupdateBayesianRegression \n(Stream Processor)\n\n\nThis extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference.\n\n\nSyntax\n\n\nstreamingml:updateBayesianRegression(\nSTRING\n model.name, \nINT|DOUBLE|LONG|FLOAT\n model.target, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:updateBayesianRegression(\nSTRING\n model.name, \nINT|DOUBLE|LONG|FLOAT\n model.target, \nINT\n model.samples, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:updateBayesianRegression(\nSTRING\n model.name, \nINT|DOUBLE|LONG|FLOAT\n model.target, \nSTRING\n model.optimizer, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:updateBayesianRegression(\nSTRING\n model.name, \nINT|DOUBLE|LONG|FLOAT\n model.target, \nDOUBLE\n learning.rate, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:updateBayesianRegression(\nSTRING\n model.name, \nINT|DOUBLE|LONG|FLOAT\n model.target, \nINT\n model.samples, \nSTRING\n model.optimizer, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:updateBayesianRegression(\nSTRING\n model.name, \nINT|DOUBLE|LONG|FLOAT\n model.target, \nINT\n model.samples, \nDOUBLE\n learning.rate, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:updateBayesianRegression(\nSTRING\n model.name, \nINT|DOUBLE|LONG|FLOAT\n model.target, \nSTRING\n model.optimizer, \nDOUBLE\n learning.rate, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:updateBayesianRegression(\nSTRING\n model.name, \nINT|DOUBLE|LONG|FLOAT\n model.target, \nINT\n model.samples, \nSTRING\n model.optimizer, \nDOUBLE\n learning.rate, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.target\n\n        \nThe target attribute (dependant variable) of the input stream.\n\n        \n\n        \nINT\nDOUBLE\nLONG\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nmodel.samples\n\n        \nNumber of samples used to construct the gradients.\n\n        \n1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.optimizer\n\n        \nThe type of optimization used\n\n        \nADAM\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the updater\n\n        \n0.05\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.feature\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nloss\n\n        \n loss of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double );\n\nfrom StreamA#streamingml:updateBayesianRegression('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Bayesian Linear regression model named \nmodel1\n using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double );\n\nfrom StreamA#streamingml:updateBayesianRegression('model1', attribute_4, 2, 'NADAM', 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Bayesian Linear regression model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream. This model draws two samples during monte-carlo integration and uses NADAM optimizer.\n\n\n\nupdatePerceptronClassifier \n(Stream Processor)\n\n\nThis extension builds/updates a linear binary classification Perceptron model.\n\n\nSyntax\n\n\nstreamingml:updatePerceptronClassifier(\nSTRING\n model.name, \nBOOL|STRING\n model.label, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:updatePerceptronClassifier(\nSTRING\n model.name, \nBOOL|STRING\n model.label, \nDOUBLE\n learning.rate, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built/updated.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.label\n\n        \nThe attribute of the label or the class of the dataset.\n\n        \n\n        \nBOOL\nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the Perceptron algorithm.\n\n        \n0.1\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.feature\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nfeatureWeight\n\n        \nWeight of the \nfeature.name\n of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a default \n0.1\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "latest"
        }, 
        {
            "location": "/api/latest/#api-docs-v202", 
            "text": "Tested Siddhi Core version:  5.0.2  It could also support other Siddhi Core minor versions.", 
            "title": "API Docs - v2.0.2"
        }, 
        {
            "location": "/api/latest/#streamingml", 
            "text": "", 
            "title": "Streamingml"
        }, 
        {
            "location": "/api/latest/#bayesianclassification-stream-processor", 
            "text": "This extension predicts using a Bayesian multivariate logistic regression model. This Bayesian model allows determining the uncertainty of each prediction by estimating the full-predictive distribution  Syntax  streamingml:bayesianClassification( STRING  model.name,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:bayesianClassification( STRING  model.name,  INT  prediction.samples,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used. \n         \n         STRING \n         No \n         No \n     \n     \n         prediction.samples \n         The number of samples to be drawn from the predictive distribution. Drawing more samples will improve the accuracy of the predictions \n         1000 \n         INT \n         Yes \n         No \n     \n     \n         model.feature \n         The features of the model that need to be attributes of the stream. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         Yes \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted label (string) \n         DOUBLE \n     \n     \n         confidence \n         Mean probability of the predictive distribution. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Bayesian Softmax regression model named  model1  to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted label is emitted to the  OutputStream  streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double).  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', 5000, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Bayesian Softmax regression model named  model1  to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The label is estimated based on 5000 samples from the predictive distribution. The predicted label is emitted to the  OutputStream  streamalong with the confidence of the prediction (mean of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double).", 
            "title": "bayesianClassification (Stream Processor)"
        }, 
        {
            "location": "/api/latest/#bayesianregression-stream-processor", 
            "text": "This extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution  Syntax  streamingml:bayesianRegression( STRING  model.name,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:bayesianRegression( STRING  model.name,  INT  prediction.samples,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used \n         \n         STRING \n         No \n         No \n     \n     \n         prediction.samples \n         The number of samples to be drawn to estimate the prediction \n         1000 \n         INT \n         Yes \n         No \n     \n     \n         model.feature \n         The features of the model that need to be attributes of the stream \n         \n         DOUBLE FLOAT INT LONG \n         No \n         Yes \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted value (double) \n         DOUBLE \n     \n     \n         confidence \n         Inverse of the standard deviation of the predictive distribution \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Bayesian regression model named  model1  to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted value is emitted to the  OutputStream  streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction double, confidence double).", 
            "title": "bayesianRegression (Stream Processor)"
        }, 
        {
            "location": "/api/latest/#kmeansincremental-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm   Syntax  streamingml:kMeansIncremental( INT  no.of.clusters,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:kMeansIncremental( INT  no.of.clusters,  DOUBLE  decay.rate,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.feature \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         Yes \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user doesnt give the decay rate so the default value will be used", 
            "title": "kMeansIncremental (Stream Processor)"
        }, 
        {
            "location": "/api/latest/#kmeansminibatch-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.).   Syntax  streamingml:kMeansMiniBatch( INT  no.of.clusters,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:kMeansMiniBatch( INT  no.of.clusters,  DOUBLE  decay.rate,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:kMeansMiniBatch( INT  no.of.clusters,  INT  maximum.iterations,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:kMeansMiniBatch( INT  no.of.clusters,  INT  no.of.events.to.retrain,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:kMeansMiniBatch( INT  no.of.clusters,  DOUBLE  decay.rate,  INT  maximum.iterations,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:kMeansMiniBatch( INT  no.of.clusters,  DOUBLE  decay.rate,  INT  no.of.events.to.retrain,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:kMeansMiniBatch( INT  no.of.clusters,  INT  maximum.iterations,  INT  no.of.events.to.retrain,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:kMeansMiniBatch( INT  no.of.clusters,  DOUBLE  decay.rate,  INT  maximum.iterations,  INT  no.of.events.to.retrain,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         maximum.iterations \n         Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change \n         50 \n         INT \n         Yes \n         No \n     \n     \n         no.of.events.to.retrain \n         number of events to recalculate cluster centers.  \n         20 \n         INT \n         Yes \n         No \n     \n     \n         model.feature \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         Yes \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user has not specified hyper params. So default values will be used.", 
            "title": "kMeansMiniBatch (Stream Processor)"
        }, 
        {
            "location": "/api/latest/#perceptronclassifier-stream-processor", 
            "text": "This extension predicts using a linear binary classification Perceptron model.  Syntax  streamingml:perceptronClassifier( STRING  model.name,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:perceptronClassifier( STRING  model.name,  DOUBLE  model.bias,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:perceptronClassifier( STRING  model.name,  DOUBLE  model.threshold,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:perceptronClassifier( STRING  model.name,  DOUBLE  model.bias,  DOUBLE  model.threshold,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used. \n         \n         STRING \n         No \n         No \n     \n     \n         model.bias \n         The bias of the Perceptron algorithm. \n         0.0 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.threshold \n         The threshold that separates the two classes. The value specified must be between zero and one. \n         0.5 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.feature \n         The features of the model that need to be attributes of the stream. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         Yes \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted value ( true/false ) \n         BOOL \n     \n     \n         confidenceLevel \n         The probability of the prediction \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias and a  0.5  threshold learning rate to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted label ( true/false ) is emitted to the  OutputStream  streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The prediction( true/false ) is emitted to the  OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 3  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a default 0.0 bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 , and  attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).", 
            "title": "perceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/latest/#updatebayesianclassification-stream-processor", 
            "text": "This extension train a Bayesian multivariate logistic regression model. We can use this model for multi-class classification. This extension uses an improved version of stochastic variational inference.  Syntax  streamingml:updateBayesianClassification( STRING  model.name,  INT  no.of.classes,  STRING|BOOL  model.target,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:updateBayesianClassification( STRING  model.name,  INT  no.of.classes,  STRING|BOOL  model.target,  INT  model.samples,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:updateBayesianClassification( STRING  model.name,  INT  no.of.classes,  STRING|BOOL  model.target,  STRING  model.optimizer,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:updateBayesianClassification( STRING  model.name,  INT  no.of.classes,  STRING|BOOL  model.target,  DOUBLE  learning.rate,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:updateBayesianClassification( STRING  model.name,  INT  no.of.classes,  STRING|BOOL  model.target,  INT  model.samples,  STRING  model.optimizer,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:updateBayesianClassification( STRING  model.name,  INT  no.of.classes,  STRING|BOOL  model.target,  INT  model.samples,  DOUBLE  learning.rate,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:updateBayesianClassification( STRING  model.name,  INT  no.of.classes,  STRING|BOOL  model.target,  STRING  model.optimizer,  DOUBLE  learning.rate,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:updateBayesianClassification( STRING  model.name,  INT  no.of.classes,  STRING|BOOL  model.target,  INT  model.samples,  STRING  model.optimizer,  DOUBLE  learning.rate,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built. \n         \n         STRING \n         No \n         No \n     \n     \n         no.of.classes \n         Number of classes to be classified by the model. \n         \n         INT \n         No \n         No \n     \n     \n         model.target \n         The target attribute (dependant variable) of the input stream. \n         \n         STRING BOOL \n         No \n         Yes \n     \n     \n         model.samples \n         Number of samples used to construct the gradients. \n         1 \n         INT \n         Yes \n         No \n     \n     \n         model.optimizer \n         The type of optimization used. \n         ADAM \n         STRING \n         Yes \n         No \n     \n     \n         learning.rate \n         The learning rate of the updater. \n         0.05 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.feature \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         Yes \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         loss \n         Weight of the  feature.name  of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updateBayesianClassification('model1', 3, attribute_4,attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Bayesian Softmax regression model named  model1  using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream. This models is capable of classifying 3 classes.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updateBayesianClassification('model1', 2, attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Bayesian Softmax regression model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream. This models act as a binary classifier.", 
            "title": "updateBayesianClassification (Stream Processor)"
        }, 
        {
            "location": "/api/latest/#updatebayesianregression-stream-processor", 
            "text": "This extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference.  Syntax  streamingml:updateBayesianRegression( STRING  model.name,  INT|DOUBLE|LONG|FLOAT  model.target,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:updateBayesianRegression( STRING  model.name,  INT|DOUBLE|LONG|FLOAT  model.target,  INT  model.samples,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:updateBayesianRegression( STRING  model.name,  INT|DOUBLE|LONG|FLOAT  model.target,  STRING  model.optimizer,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:updateBayesianRegression( STRING  model.name,  INT|DOUBLE|LONG|FLOAT  model.target,  DOUBLE  learning.rate,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:updateBayesianRegression( STRING  model.name,  INT|DOUBLE|LONG|FLOAT  model.target,  INT  model.samples,  STRING  model.optimizer,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:updateBayesianRegression( STRING  model.name,  INT|DOUBLE|LONG|FLOAT  model.target,  INT  model.samples,  DOUBLE  learning.rate,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:updateBayesianRegression( STRING  model.name,  INT|DOUBLE|LONG|FLOAT  model.target,  STRING  model.optimizer,  DOUBLE  learning.rate,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:updateBayesianRegression( STRING  model.name,  INT|DOUBLE|LONG|FLOAT  model.target,  INT  model.samples,  STRING  model.optimizer,  DOUBLE  learning.rate,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built. \n         \n         STRING \n         No \n         No \n     \n     \n         model.target \n         The target attribute (dependant variable) of the input stream. \n         \n         INT DOUBLE LONG FLOAT \n         No \n         Yes \n     \n     \n         model.samples \n         Number of samples used to construct the gradients. \n         1 \n         INT \n         Yes \n         No \n     \n     \n         model.optimizer \n         The type of optimization used \n         ADAM \n         STRING \n         Yes \n         No \n     \n     \n         learning.rate \n         The learning rate of the updater \n         0.05 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.feature \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         Yes \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         loss \n          loss of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double );\n\nfrom StreamA#streamingml:updateBayesianRegression('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Bayesian Linear regression model named  model1  using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double );\n\nfrom StreamA#streamingml:updateBayesianRegression('model1', attribute_4, 2, 'NADAM', 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Bayesian Linear regression model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream. This model draws two samples during monte-carlo integration and uses NADAM optimizer.", 
            "title": "updateBayesianRegression (Stream Processor)"
        }, 
        {
            "location": "/api/latest/#updateperceptronclassifier-stream-processor", 
            "text": "This extension builds/updates a linear binary classification Perceptron model.  Syntax  streamingml:updatePerceptronClassifier( STRING  model.name,  BOOL|STRING  model.label,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:updatePerceptronClassifier( STRING  model.name,  BOOL|STRING  model.label,  DOUBLE  learning.rate,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built/updated. \n         \n         STRING \n         No \n         No \n     \n     \n         model.label \n         The attribute of the label or the class of the dataset. \n         \n         BOOL STRING \n         No \n         Yes \n     \n     \n         learning.rate \n         The learning rate of the Perceptron algorithm. \n         0.1 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.feature \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         Yes \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         featureWeight \n         Weight of the  feature.name  of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a default  0.1  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "updatePerceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.2/", 
            "text": "API Docs - v2.0.2\n\n\n\n\nTested Siddhi Core version: \n5.0.2\n\n\nIt could also support other Siddhi Core minor versions.\n\n\n\n\nStreamingml\n\n\nbayesianClassification \n(Stream Processor)\n\n\nThis extension predicts using a Bayesian multivariate logistic regression model. This Bayesian model allows determining the uncertainty of each prediction by estimating the full-predictive distribution\n\n\nSyntax\n\n\nstreamingml:bayesianClassification(\nSTRING\n model.name, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:bayesianClassification(\nSTRING\n model.name, \nINT\n prediction.samples, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nprediction.samples\n\n        \nThe number of samples to be drawn from the predictive distribution. Drawing more samples will improve the accuracy of the predictions\n\n        \n1000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.feature\n\n        \nThe features of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted label (string)\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nconfidence\n\n        \nMean probability of the predictive distribution.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Bayesian Softmax regression model named \nmodel1\n to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted label is emitted to the \nOutputStream\n streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double).\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', 5000, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Bayesian Softmax regression model named \nmodel1\n to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The label is estimated based on 5000 samples from the predictive distribution. The predicted label is emitted to the \nOutputStream\n streamalong with the confidence of the prediction (mean of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double).\n\n\n\nbayesianRegression \n(Stream Processor)\n\n\nThis extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution\n\n\nSyntax\n\n\nstreamingml:bayesianRegression(\nSTRING\n model.name, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:bayesianRegression(\nSTRING\n model.name, \nINT\n prediction.samples, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nprediction.samples\n\n        \nThe number of samples to be drawn to estimate the prediction\n\n        \n1000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.feature\n\n        \nThe features of the model that need to be attributes of the stream\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted value (double)\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nconfidence\n\n        \nInverse of the standard deviation of the predictive distribution\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Bayesian regression model named \nmodel1\n to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted value is emitted to the \nOutputStream\n streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction double, confidence double).\n\n\n\nkMeansIncremental \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm \n\n\nSyntax\n\n\nstreamingml:kMeansIncremental(\nINT\n no.of.clusters, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:kMeansIncremental(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.feature\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user doesnt give the decay rate so the default value will be used\n\n\n\nkMeansMiniBatch \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). \n\n\nSyntax\n\n\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nINT\n maximum.iterations, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nINT\n no.of.events.to.retrain, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nINT\n maximum.iterations, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nINT\n no.of.events.to.retrain, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nINT\n maximum.iterations, \nINT\n no.of.events.to.retrain, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nINT\n maximum.iterations, \nINT\n no.of.events.to.retrain, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmaximum.iterations\n\n        \nNumber of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change\n\n        \n50\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nno.of.events.to.retrain\n\n        \nnumber of events to recalculate cluster centers. \n\n        \n20\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.feature\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user has not specified hyper params. So default values will be used.\n\n\n\nperceptronClassifier \n(Stream Processor)\n\n\nThis extension predicts using a linear binary classification Perceptron model.\n\n\nSyntax\n\n\nstreamingml:perceptronClassifier(\nSTRING\n model.name, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:perceptronClassifier(\nSTRING\n model.name, \nDOUBLE\n model.bias, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:perceptronClassifier(\nSTRING\n model.name, \nDOUBLE\n model.threshold, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:perceptronClassifier(\nSTRING\n model.name, \nDOUBLE\n model.bias, \nDOUBLE\n model.threshold, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.bias\n\n        \nThe bias of the Perceptron algorithm.\n\n        \n0.0\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.threshold\n\n        \nThe threshold that separates the two classes. The value specified must be between zero and one.\n\n        \n0.5\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.feature\n\n        \nThe features of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted value (\ntrue/false\n)\n\n        \nBOOL\n\n    \n\n    \n\n        \nconfidenceLevel\n\n        \nThe probability of the prediction\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias and a \n0.5\n threshold learning rate to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted label (\ntrue/false\n) is emitted to the \nOutputStream\n streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The prediction(\ntrue/false\n) is emitted to the \nOutputStream\nstream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 3\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a default 0.0 bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, and \nattribute_2\n. The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nupdateBayesianClassification \n(Stream Processor)\n\n\nThis extension train a Bayesian multivariate logistic regression model. We can use this model for multi-class classification. This extension uses an improved version of stochastic variational inference.\n\n\nSyntax\n\n\nstreamingml:updateBayesianClassification(\nSTRING\n model.name, \nINT\n no.of.classes, \nSTRING|BOOL\n model.target, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:updateBayesianClassification(\nSTRING\n model.name, \nINT\n no.of.classes, \nSTRING|BOOL\n model.target, \nINT\n model.samples, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:updateBayesianClassification(\nSTRING\n model.name, \nINT\n no.of.classes, \nSTRING|BOOL\n model.target, \nSTRING\n model.optimizer, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:updateBayesianClassification(\nSTRING\n model.name, \nINT\n no.of.classes, \nSTRING|BOOL\n model.target, \nDOUBLE\n learning.rate, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:updateBayesianClassification(\nSTRING\n model.name, \nINT\n no.of.classes, \nSTRING|BOOL\n model.target, \nINT\n model.samples, \nSTRING\n model.optimizer, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:updateBayesianClassification(\nSTRING\n model.name, \nINT\n no.of.classes, \nSTRING|BOOL\n model.target, \nINT\n model.samples, \nDOUBLE\n learning.rate, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:updateBayesianClassification(\nSTRING\n model.name, \nINT\n no.of.classes, \nSTRING|BOOL\n model.target, \nSTRING\n model.optimizer, \nDOUBLE\n learning.rate, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:updateBayesianClassification(\nSTRING\n model.name, \nINT\n no.of.classes, \nSTRING|BOOL\n model.target, \nINT\n model.samples, \nSTRING\n model.optimizer, \nDOUBLE\n learning.rate, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nno.of.classes\n\n        \nNumber of classes to be classified by the model.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.target\n\n        \nThe target attribute (dependant variable) of the input stream.\n\n        \n\n        \nSTRING\nBOOL\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nmodel.samples\n\n        \nNumber of samples used to construct the gradients.\n\n        \n1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.optimizer\n\n        \nThe type of optimization used.\n\n        \nADAM\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the updater.\n\n        \n0.05\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.feature\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nloss\n\n        \nWeight of the \nfeature.name\n of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updateBayesianClassification('model1', 3, attribute_4,attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Bayesian Softmax regression model named \nmodel1\n using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream. This models is capable of classifying 3 classes.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updateBayesianClassification('model1', 2, attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Bayesian Softmax regression model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream. This models act as a binary classifier.\n\n\n\nupdateBayesianRegression \n(Stream Processor)\n\n\nThis extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference.\n\n\nSyntax\n\n\nstreamingml:updateBayesianRegression(\nSTRING\n model.name, \nINT|DOUBLE|LONG|FLOAT\n model.target, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:updateBayesianRegression(\nSTRING\n model.name, \nINT|DOUBLE|LONG|FLOAT\n model.target, \nINT\n model.samples, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:updateBayesianRegression(\nSTRING\n model.name, \nINT|DOUBLE|LONG|FLOAT\n model.target, \nSTRING\n model.optimizer, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:updateBayesianRegression(\nSTRING\n model.name, \nINT|DOUBLE|LONG|FLOAT\n model.target, \nDOUBLE\n learning.rate, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:updateBayesianRegression(\nSTRING\n model.name, \nINT|DOUBLE|LONG|FLOAT\n model.target, \nINT\n model.samples, \nSTRING\n model.optimizer, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:updateBayesianRegression(\nSTRING\n model.name, \nINT|DOUBLE|LONG|FLOAT\n model.target, \nINT\n model.samples, \nDOUBLE\n learning.rate, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:updateBayesianRegression(\nSTRING\n model.name, \nINT|DOUBLE|LONG|FLOAT\n model.target, \nSTRING\n model.optimizer, \nDOUBLE\n learning.rate, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:updateBayesianRegression(\nSTRING\n model.name, \nINT|DOUBLE|LONG|FLOAT\n model.target, \nINT\n model.samples, \nSTRING\n model.optimizer, \nDOUBLE\n learning.rate, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.target\n\n        \nThe target attribute (dependant variable) of the input stream.\n\n        \n\n        \nINT\nDOUBLE\nLONG\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nmodel.samples\n\n        \nNumber of samples used to construct the gradients.\n\n        \n1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.optimizer\n\n        \nThe type of optimization used\n\n        \nADAM\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the updater\n\n        \n0.05\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.feature\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nloss\n\n        \n loss of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double );\n\nfrom StreamA#streamingml:updateBayesianRegression('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Bayesian Linear regression model named \nmodel1\n using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double );\n\nfrom StreamA#streamingml:updateBayesianRegression('model1', attribute_4, 2, 'NADAM', 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Bayesian Linear regression model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream. This model draws two samples during monte-carlo integration and uses NADAM optimizer.\n\n\n\nupdatePerceptronClassifier \n(Stream Processor)\n\n\nThis extension builds/updates a linear binary classification Perceptron model.\n\n\nSyntax\n\n\nstreamingml:updatePerceptronClassifier(\nSTRING\n model.name, \nBOOL|STRING\n model.label, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\nstreamingml:updatePerceptronClassifier(\nSTRING\n model.name, \nBOOL|STRING\n model.label, \nDOUBLE\n learning.rate, \nDOUBLE|FLOAT|INT|LONG\n model.feature, \nDOUBLE|FLOAT|INT|LONG\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built/updated.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.label\n\n        \nThe attribute of the label or the class of the dataset.\n\n        \n\n        \nBOOL\nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the Perceptron algorithm.\n\n        \n0.1\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.feature\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nfeatureWeight\n\n        \nWeight of the \nfeature.name\n of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a default \n0.1\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "2.0.2"
        }, 
        {
            "location": "/api/2.0.2/#api-docs-v202", 
            "text": "Tested Siddhi Core version:  5.0.2  It could also support other Siddhi Core minor versions.", 
            "title": "API Docs - v2.0.2"
        }, 
        {
            "location": "/api/2.0.2/#streamingml", 
            "text": "", 
            "title": "Streamingml"
        }, 
        {
            "location": "/api/2.0.2/#bayesianclassification-stream-processor", 
            "text": "This extension predicts using a Bayesian multivariate logistic regression model. This Bayesian model allows determining the uncertainty of each prediction by estimating the full-predictive distribution  Syntax  streamingml:bayesianClassification( STRING  model.name,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:bayesianClassification( STRING  model.name,  INT  prediction.samples,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used. \n         \n         STRING \n         No \n         No \n     \n     \n         prediction.samples \n         The number of samples to be drawn from the predictive distribution. Drawing more samples will improve the accuracy of the predictions \n         1000 \n         INT \n         Yes \n         No \n     \n     \n         model.feature \n         The features of the model that need to be attributes of the stream. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         Yes \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted label (string) \n         DOUBLE \n     \n     \n         confidence \n         Mean probability of the predictive distribution. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Bayesian Softmax regression model named  model1  to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted label is emitted to the  OutputStream  streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double).  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', 5000, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Bayesian Softmax regression model named  model1  to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The label is estimated based on 5000 samples from the predictive distribution. The predicted label is emitted to the  OutputStream  streamalong with the confidence of the prediction (mean of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double).", 
            "title": "bayesianClassification (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.2/#bayesianregression-stream-processor", 
            "text": "This extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution  Syntax  streamingml:bayesianRegression( STRING  model.name,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:bayesianRegression( STRING  model.name,  INT  prediction.samples,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used \n         \n         STRING \n         No \n         No \n     \n     \n         prediction.samples \n         The number of samples to be drawn to estimate the prediction \n         1000 \n         INT \n         Yes \n         No \n     \n     \n         model.feature \n         The features of the model that need to be attributes of the stream \n         \n         DOUBLE FLOAT INT LONG \n         No \n         Yes \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted value (double) \n         DOUBLE \n     \n     \n         confidence \n         Inverse of the standard deviation of the predictive distribution \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Bayesian regression model named  model1  to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted value is emitted to the  OutputStream  streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction double, confidence double).", 
            "title": "bayesianRegression (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.2/#kmeansincremental-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm   Syntax  streamingml:kMeansIncremental( INT  no.of.clusters,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:kMeansIncremental( INT  no.of.clusters,  DOUBLE  decay.rate,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.feature \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         Yes \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user doesnt give the decay rate so the default value will be used", 
            "title": "kMeansIncremental (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.2/#kmeansminibatch-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.).   Syntax  streamingml:kMeansMiniBatch( INT  no.of.clusters,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:kMeansMiniBatch( INT  no.of.clusters,  DOUBLE  decay.rate,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:kMeansMiniBatch( INT  no.of.clusters,  INT  maximum.iterations,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:kMeansMiniBatch( INT  no.of.clusters,  INT  no.of.events.to.retrain,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:kMeansMiniBatch( INT  no.of.clusters,  DOUBLE  decay.rate,  INT  maximum.iterations,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:kMeansMiniBatch( INT  no.of.clusters,  DOUBLE  decay.rate,  INT  no.of.events.to.retrain,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:kMeansMiniBatch( INT  no.of.clusters,  INT  maximum.iterations,  INT  no.of.events.to.retrain,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:kMeansMiniBatch( INT  no.of.clusters,  DOUBLE  decay.rate,  INT  maximum.iterations,  INT  no.of.events.to.retrain,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         maximum.iterations \n         Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change \n         50 \n         INT \n         Yes \n         No \n     \n     \n         no.of.events.to.retrain \n         number of events to recalculate cluster centers.  \n         20 \n         INT \n         Yes \n         No \n     \n     \n         model.feature \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         Yes \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user has not specified hyper params. So default values will be used.", 
            "title": "kMeansMiniBatch (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.2/#perceptronclassifier-stream-processor", 
            "text": "This extension predicts using a linear binary classification Perceptron model.  Syntax  streamingml:perceptronClassifier( STRING  model.name,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:perceptronClassifier( STRING  model.name,  DOUBLE  model.bias,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:perceptronClassifier( STRING  model.name,  DOUBLE  model.threshold,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:perceptronClassifier( STRING  model.name,  DOUBLE  model.bias,  DOUBLE  model.threshold,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used. \n         \n         STRING \n         No \n         No \n     \n     \n         model.bias \n         The bias of the Perceptron algorithm. \n         0.0 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.threshold \n         The threshold that separates the two classes. The value specified must be between zero and one. \n         0.5 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.feature \n         The features of the model that need to be attributes of the stream. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         Yes \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted value ( true/false ) \n         BOOL \n     \n     \n         confidenceLevel \n         The probability of the prediction \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias and a  0.5  threshold learning rate to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted label ( true/false ) is emitted to the  OutputStream  streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The prediction( true/false ) is emitted to the  OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 3  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a default 0.0 bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 , and  attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).", 
            "title": "perceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.2/#updatebayesianclassification-stream-processor", 
            "text": "This extension train a Bayesian multivariate logistic regression model. We can use this model for multi-class classification. This extension uses an improved version of stochastic variational inference.  Syntax  streamingml:updateBayesianClassification( STRING  model.name,  INT  no.of.classes,  STRING|BOOL  model.target,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:updateBayesianClassification( STRING  model.name,  INT  no.of.classes,  STRING|BOOL  model.target,  INT  model.samples,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:updateBayesianClassification( STRING  model.name,  INT  no.of.classes,  STRING|BOOL  model.target,  STRING  model.optimizer,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:updateBayesianClassification( STRING  model.name,  INT  no.of.classes,  STRING|BOOL  model.target,  DOUBLE  learning.rate,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:updateBayesianClassification( STRING  model.name,  INT  no.of.classes,  STRING|BOOL  model.target,  INT  model.samples,  STRING  model.optimizer,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:updateBayesianClassification( STRING  model.name,  INT  no.of.classes,  STRING|BOOL  model.target,  INT  model.samples,  DOUBLE  learning.rate,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:updateBayesianClassification( STRING  model.name,  INT  no.of.classes,  STRING|BOOL  model.target,  STRING  model.optimizer,  DOUBLE  learning.rate,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:updateBayesianClassification( STRING  model.name,  INT  no.of.classes,  STRING|BOOL  model.target,  INT  model.samples,  STRING  model.optimizer,  DOUBLE  learning.rate,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built. \n         \n         STRING \n         No \n         No \n     \n     \n         no.of.classes \n         Number of classes to be classified by the model. \n         \n         INT \n         No \n         No \n     \n     \n         model.target \n         The target attribute (dependant variable) of the input stream. \n         \n         STRING BOOL \n         No \n         Yes \n     \n     \n         model.samples \n         Number of samples used to construct the gradients. \n         1 \n         INT \n         Yes \n         No \n     \n     \n         model.optimizer \n         The type of optimization used. \n         ADAM \n         STRING \n         Yes \n         No \n     \n     \n         learning.rate \n         The learning rate of the updater. \n         0.05 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.feature \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         Yes \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         loss \n         Weight of the  feature.name  of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updateBayesianClassification('model1', 3, attribute_4,attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Bayesian Softmax regression model named  model1  using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream. This models is capable of classifying 3 classes.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updateBayesianClassification('model1', 2, attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Bayesian Softmax regression model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream. This models act as a binary classifier.", 
            "title": "updateBayesianClassification (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.2/#updatebayesianregression-stream-processor", 
            "text": "This extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference.  Syntax  streamingml:updateBayesianRegression( STRING  model.name,  INT|DOUBLE|LONG|FLOAT  model.target,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:updateBayesianRegression( STRING  model.name,  INT|DOUBLE|LONG|FLOAT  model.target,  INT  model.samples,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:updateBayesianRegression( STRING  model.name,  INT|DOUBLE|LONG|FLOAT  model.target,  STRING  model.optimizer,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:updateBayesianRegression( STRING  model.name,  INT|DOUBLE|LONG|FLOAT  model.target,  DOUBLE  learning.rate,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:updateBayesianRegression( STRING  model.name,  INT|DOUBLE|LONG|FLOAT  model.target,  INT  model.samples,  STRING  model.optimizer,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:updateBayesianRegression( STRING  model.name,  INT|DOUBLE|LONG|FLOAT  model.target,  INT  model.samples,  DOUBLE  learning.rate,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:updateBayesianRegression( STRING  model.name,  INT|DOUBLE|LONG|FLOAT  model.target,  STRING  model.optimizer,  DOUBLE  learning.rate,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:updateBayesianRegression( STRING  model.name,  INT|DOUBLE|LONG|FLOAT  model.target,  INT  model.samples,  STRING  model.optimizer,  DOUBLE  learning.rate,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built. \n         \n         STRING \n         No \n         No \n     \n     \n         model.target \n         The target attribute (dependant variable) of the input stream. \n         \n         INT DOUBLE LONG FLOAT \n         No \n         Yes \n     \n     \n         model.samples \n         Number of samples used to construct the gradients. \n         1 \n         INT \n         Yes \n         No \n     \n     \n         model.optimizer \n         The type of optimization used \n         ADAM \n         STRING \n         Yes \n         No \n     \n     \n         learning.rate \n         The learning rate of the updater \n         0.05 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.feature \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         Yes \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         loss \n          loss of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double );\n\nfrom StreamA#streamingml:updateBayesianRegression('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Bayesian Linear regression model named  model1  using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double );\n\nfrom StreamA#streamingml:updateBayesianRegression('model1', attribute_4, 2, 'NADAM', 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Bayesian Linear regression model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream. This model draws two samples during monte-carlo integration and uses NADAM optimizer.", 
            "title": "updateBayesianRegression (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.2/#updateperceptronclassifier-stream-processor", 
            "text": "This extension builds/updates a linear binary classification Perceptron model.  Syntax  streamingml:updatePerceptronClassifier( STRING  model.name,  BOOL|STRING  model.label,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)\nstreamingml:updatePerceptronClassifier( STRING  model.name,  BOOL|STRING  model.label,  DOUBLE  learning.rate,  DOUBLE|FLOAT|INT|LONG  model.feature,  DOUBLE|FLOAT|INT|LONG  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built/updated. \n         \n         STRING \n         No \n         No \n     \n     \n         model.label \n         The attribute of the label or the class of the dataset. \n         \n         BOOL STRING \n         No \n         Yes \n     \n     \n         learning.rate \n         The learning rate of the Perceptron algorithm. \n         0.1 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.feature \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         Yes \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         featureWeight \n         Weight of the  feature.name  of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a default  0.1  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "updatePerceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.1/", 
            "text": "API Docs - v2.0.1\n\n\n\n\nTested Siddhi Core version: \n5.0.0\n\n\nIt could also support other Siddhi Core minor versions.\n\n\n\n\nStreamingml\n\n\nbayesianClassification \n(Stream Processor)\n\n\nThis extension predicts using a Bayesian multivariate logistic regression model. This Bayesian model allows determining the uncertainty of each prediction by estimating the full-predictive distribution\n\n\n\nSyntax\n\n\nstreamingml:bayesianClassification(\nSTRING\n model.name, \nINT\n prediction.samples, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nprediction.samples\n\n        \nThe number of samples to be drawn from the predictive distribution. Drawing more samples will improve the accuracy of the predictions\n\n        \n1000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThe features of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted label (string)\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nconfidence\n\n        \nMean probability of the predictive distribution.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Bayesian Softmax regression model named \nmodel1\n to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted label is emitted to the \nOutputStream\n streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double).\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', 5000, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Bayesian Softmax regression model named \nmodel1\n to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The label is estimated based on 5000 samples from the predictive distribution. The predicted label is emitted to the \nOutputStream\n streamalong with the confidence of the prediction (mean of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double).\n\n\n\nbayesianRegression \n(Stream Processor)\n\n\nThis extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution\n\n\n\nSyntax\n\n\nstreamingml:bayesianRegression(\nSTRING\n model.name, \nINT\n prediction.samples, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nprediction.samples\n\n        \nThe number of samples to be drawn to estimate the prediction\n\n        \n1000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThe features of the model that need to be attributes of the stream\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted value (double)\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nconfidence\n\n        \nInverse of the standard deviation of the predictive distribution\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Bayesian regression model named \nmodel1\n to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted value is emitted to the \nOutputStream\n streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction double, confidence double).\n\n\n\nkMeansIncremental \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm \n\n\n\nSyntax\n\n\nstreamingml:kMeansIncremental(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user doesnt give the decay rate so the default value will be used\n\n\n\nkMeansMiniBatch \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). \n\n\n\nSyntax\n\n\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nINT\n maximum.iterations, \nINT\n no.of.events.to.retrain, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmaximum.iterations\n\n        \nNumber of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change\n\n        \n50\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nno.of.events.to.retrain\n\n        \nnumber of events to recalculate cluster centers. \n\n        \n20\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user has not specified hyper params. So default values will be used.\n\n\n\nperceptronClassifier \n(Stream Processor)\n\n\nThis extension predicts using a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:perceptronClassifier(\nSTRING\n model.name, \nDOUBLE\n model.bias, \nDOUBLE\n model.threshold, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.bias\n\n        \nThe bias of the Perceptron algorithm.\n\n        \n0.0\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.threshold\n\n        \nThe threshold that separates the two classes. The value specified must be between zero and one.\n\n        \n The output is a probability.\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThe features of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted value (\ntrue/false\n)\n\n        \nBOOL\n\n    \n\n    \n\n        \nconfidenceLevel\n\n        \nThe probability of the prediction\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias and a \n0.5\n threshold learning rate to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted label (\ntrue/false\n) is emitted to the \nOutputStream\n streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The prediction(\ntrue/false\n) is emitted to the \nOutputStream\nstream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 3\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a default 0.0 bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, and \nattribute_2\n. The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nupdateBayesianClassification \n(Stream Processor)\n\n\nThis extension train a Bayesian multivariate logistic regression model. We can use this model for multi-class classification. This extension uses an improved version of stochastic variational inference.\n\n\n\nSyntax\n\n\nstreamingml:updateBayesianClassification(\nSTRING\n model.name, \nDOUBLE|INT\n no.of.classes, \nDOUBLE|INT\n model.target, \nINT\n model.samples, \nSTRING\n model.optimizer, \nDOUBLE\n learning.rate, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nno.of.classes\n\n        \nNumber of classes to be classified by the model.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.target\n\n        \nThe target attribute (dependant variable) of the input stream.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.samples\n\n        \nNumber of samples used to construct the gradients.\n\n        \n1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.optimizer\n\n        \nThe type of optimization used.\n\n        \nADAM\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the updater.\n\n        \n0.05\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nloss\n\n        \nWeight of the \nfeature.name\n of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updateBayesianClassification('model1', 3, attribute_4,attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Bayesian Softmax regression model named \nmodel1\n using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream. This models is capable of classifying 3 classes.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updateBayesianClassification('model1', 2, attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Bayesian Softmax regression model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream. This models act as a binary classifier.\n\n\n\nupdateBayesianRegression \n(Stream Processor)\n\n\nThis extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference.\n\n\n\nSyntax\n\n\nstreamingml:updateBayesianRegression(\nSTRING\n model.name, \nDOUBLE|INT\n model.target, \nINT\n model.samples, \nSTRING\n model.optimizer, \nDOUBLE\n learning.rate, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.target\n\n        \nThe target attribute (dependant variable) of the input stream.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.samples\n\n        \nNumber of samples used to construct the gradients.\n\n        \n1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.optimizer\n\n        \nThe type of optimization used\n\n        \nADAM\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the updater\n\n        \n0.05\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nloss\n\n        \n loss of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double );\n\nfrom StreamA#streamingml:updateBayesianRegression('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Bayesian Linear regression model named \nmodel1\n using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double );\n\nfrom StreamA#streamingml:updateBayesianRegression('model1', attribute_4, 2, 'NADAM', 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Bayesian Linear regression model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream. This model draws two samples during monte-carlo integration and uses NADAM optimizer.\n\n\n\nupdatePerceptronClassifier \n(Stream Processor)\n\n\nThis extension builds/updates a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:updatePerceptronClassifier(\nSTRING\n model.name, \nBOOL|STRING\n model.label, \nDOUBLE\n learning.rate, \nDOUBLE|INT\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built/updated.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.label\n\n        \nThe attribute of the label or the class of the dataset.\n\n        \n\n        \nBOOL\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the Perceptron algorithm.\n\n        \n0.1\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nfeatureWeight\n\n        \nWeight of the \nfeature.name\n of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a default \n0.1\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "2.0.1"
        }, 
        {
            "location": "/api/2.0.1/#api-docs-v201", 
            "text": "Tested Siddhi Core version:  5.0.0  It could also support other Siddhi Core minor versions.", 
            "title": "API Docs - v2.0.1"
        }, 
        {
            "location": "/api/2.0.1/#streamingml", 
            "text": "", 
            "title": "Streamingml"
        }, 
        {
            "location": "/api/2.0.1/#bayesianclassification-stream-processor", 
            "text": "This extension predicts using a Bayesian multivariate logistic regression model. This Bayesian model allows determining the uncertainty of each prediction by estimating the full-predictive distribution  Syntax  streamingml:bayesianClassification( STRING  model.name,  INT  prediction.samples,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used. \n         \n         STRING \n         No \n         No \n     \n     \n         prediction.samples \n         The number of samples to be drawn from the predictive distribution. Drawing more samples will improve the accuracy of the predictions \n         1000 \n         INT \n         Yes \n         No \n     \n     \n         model.features \n         The features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted label (string) \n         DOUBLE \n     \n     \n         confidence \n         Mean probability of the predictive distribution. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Bayesian Softmax regression model named  model1  to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted label is emitted to the  OutputStream  streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double).  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', 5000, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Bayesian Softmax regression model named  model1  to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The label is estimated based on 5000 samples from the predictive distribution. The predicted label is emitted to the  OutputStream  streamalong with the confidence of the prediction (mean of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double).", 
            "title": "bayesianClassification (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.1/#bayesianregression-stream-processor", 
            "text": "This extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution  Syntax  streamingml:bayesianRegression( STRING  model.name,  INT  prediction.samples,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used \n         \n         STRING \n         No \n         No \n     \n     \n         prediction.samples \n         The number of samples to be drawn to estimate the prediction \n         1000 \n         INT \n         Yes \n         No \n     \n     \n         model.features \n         The features of the model that need to be attributes of the stream \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted value (double) \n         DOUBLE \n     \n     \n         confidence \n         Inverse of the standard deviation of the predictive distribution \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Bayesian regression model named  model1  to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted value is emitted to the  OutputStream  streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction double, confidence double).", 
            "title": "bayesianRegression (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.1/#kmeansincremental-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm   Syntax  streamingml:kMeansIncremental( INT  no.of.clusters,  DOUBLE  decay.rate,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user doesnt give the decay rate so the default value will be used", 
            "title": "kMeansIncremental (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.1/#kmeansminibatch-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.).   Syntax  streamingml:kMeansMiniBatch( INT  no.of.clusters,  DOUBLE  decay.rate,  INT  maximum.iterations,  INT  no.of.events.to.retrain,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         maximum.iterations \n         Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change \n         50 \n         INT \n         Yes \n         No \n     \n     \n         no.of.events.to.retrain \n         number of events to recalculate cluster centers.  \n         20 \n         INT \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user has not specified hyper params. So default values will be used.", 
            "title": "kMeansMiniBatch (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.1/#perceptronclassifier-stream-processor", 
            "text": "This extension predicts using a linear binary classification Perceptron model.  Syntax  streamingml:perceptronClassifier( STRING  model.name,  DOUBLE  model.bias,  DOUBLE  model.threshold,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used. \n         \n         STRING \n         No \n         No \n     \n     \n         model.bias \n         The bias of the Perceptron algorithm. \n         0.0 \n         DOUBLE \n         No \n         No \n     \n     \n         model.threshold \n         The threshold that separates the two classes. The value specified must be between zero and one. \n          The output is a probability. \n         DOUBLE \n         No \n         No \n     \n     \n         model.features \n         The features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted value ( true/false ) \n         BOOL \n     \n     \n         confidenceLevel \n         The probability of the prediction \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias and a  0.5  threshold learning rate to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted label ( true/false ) is emitted to the  OutputStream  streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The prediction( true/false ) is emitted to the  OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 3  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a default 0.0 bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 , and  attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).", 
            "title": "perceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.1/#updatebayesianclassification-stream-processor", 
            "text": "This extension train a Bayesian multivariate logistic regression model. We can use this model for multi-class classification. This extension uses an improved version of stochastic variational inference.  Syntax  streamingml:updateBayesianClassification( STRING  model.name,  DOUBLE|INT  no.of.classes,  DOUBLE|INT  model.target,  INT  model.samples,  STRING  model.optimizer,  DOUBLE  learning.rate,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built. \n         \n         STRING \n         No \n         No \n     \n     \n         no.of.classes \n         Number of classes to be classified by the model. \n         \n         DOUBLE INT \n         No \n         No \n     \n     \n         model.target \n         The target attribute (dependant variable) of the input stream. \n         \n         DOUBLE INT \n         No \n         No \n     \n     \n         model.samples \n         Number of samples used to construct the gradients. \n         1 \n         INT \n         Yes \n         No \n     \n     \n         model.optimizer \n         The type of optimization used. \n         ADAM \n         STRING \n         Yes \n         No \n     \n     \n         learning.rate \n         The learning rate of the updater. \n         0.05 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         loss \n         Weight of the  feature.name  of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updateBayesianClassification('model1', 3, attribute_4,attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Bayesian Softmax regression model named  model1  using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream. This models is capable of classifying 3 classes.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updateBayesianClassification('model1', 2, attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Bayesian Softmax regression model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream. This models act as a binary classifier.", 
            "title": "updateBayesianClassification (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.1/#updatebayesianregression-stream-processor", 
            "text": "This extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference.  Syntax  streamingml:updateBayesianRegression( STRING  model.name,  DOUBLE|INT  model.target,  INT  model.samples,  STRING  model.optimizer,  DOUBLE  learning.rate,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built. \n         \n         STRING \n         No \n         No \n     \n     \n         model.target \n         The target attribute (dependant variable) of the input stream. \n         \n         DOUBLE INT \n         No \n         No \n     \n     \n         model.samples \n         Number of samples used to construct the gradients. \n         1 \n         INT \n         Yes \n         No \n     \n     \n         model.optimizer \n         The type of optimization used \n         ADAM \n         STRING \n         Yes \n         No \n     \n     \n         learning.rate \n         The learning rate of the updater \n         0.05 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         loss \n          loss of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double );\n\nfrom StreamA#streamingml:updateBayesianRegression('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Bayesian Linear regression model named  model1  using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double );\n\nfrom StreamA#streamingml:updateBayesianRegression('model1', attribute_4, 2, 'NADAM', 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Bayesian Linear regression model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream. This model draws two samples during monte-carlo integration and uses NADAM optimizer.", 
            "title": "updateBayesianRegression (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.1/#updateperceptronclassifier-stream-processor", 
            "text": "This extension builds/updates a linear binary classification Perceptron model.  Syntax  streamingml:updatePerceptronClassifier( STRING  model.name,  BOOL|STRING  model.label,  DOUBLE  learning.rate,  DOUBLE|INT  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built/updated. \n         \n         STRING \n         No \n         No \n     \n     \n         model.label \n         The attribute of the label or the class of the dataset. \n         \n         BOOL STRING \n         No \n         No \n     \n     \n         learning.rate \n         The learning rate of the Perceptron algorithm. \n         0.1 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         featureWeight \n         Weight of the  feature.name  of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a default  0.1  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "updatePerceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.0/", 
            "text": "API Docs - v2.0.0\n\n\nStreamingml\n\n\nbayesianClassification \n(Stream Processor)\n\n\nThis extension predicts using a Bayesian multivariate logistic regression model. This Bayesian model allows determining the uncertainty of each prediction by estimating the full-predictive distribution\n\n\n\nSyntax\n\n\nstreamingml:bayesianClassification(\nSTRING\n model.name, \nINT\n prediction.samples, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nprediction.samples\n\n        \nThe number of samples to be drawn from the predictive distribution. Drawing more samples will improve the accuracy of the predictions\n\n        \n1000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThe features of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted label (string)\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nconfidence\n\n        \nMean probability of the predictive distribution.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Bayesian Softmax regression model named \nmodel1\n to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted label is emitted to the \nOutputStream\n streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double).\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', 5000, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Bayesian Softmax regression model named \nmodel1\n to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The label is estimated based on 5000 samples from the predictive distribution. The predicted label is emitted to the \nOutputStream\n streamalong with the confidence of the prediction (mean of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double).\n\n\n\nbayesianRegression \n(Stream Processor)\n\n\nThis extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution\n\n\n\nSyntax\n\n\nstreamingml:bayesianRegression(\nSTRING\n model.name, \nINT\n prediction.samples, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nprediction.samples\n\n        \nThe number of samples to be drawn to estimate the prediction\n\n        \n1000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThe features of the model that need to be attributes of the stream\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted value (double)\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nconfidence\n\n        \nInverse of the standard deviation of the predictive distribution\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Bayesian regression model named \nmodel1\n to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted value is emitted to the \nOutputStream\n streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction double, confidence double).\n\n\n\nkMeansIncremental \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm \n\n\n\nSyntax\n\n\nstreamingml:kMeansIncremental(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user doesnt give the decay rate so the default value will be used\n\n\n\nkMeansMiniBatch \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). \n\n\n\nSyntax\n\n\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nINT\n maximum.iterations, \nINT\n no.of.events.to.retrain, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmaximum.iterations\n\n        \nNumber of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change\n\n        \n50\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nno.of.events.to.retrain\n\n        \nnumber of events to recalculate cluster centers. \n\n        \n20\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user has not specified hyper params. So default values will be used.\n\n\n\nperceptronClassifier \n(Stream Processor)\n\n\nThis extension predicts using a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:perceptronClassifier(\nSTRING\n model.name, \nDOUBLE\n model.bias, \nDOUBLE\n model.threshold, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.bias\n\n        \nThe bias of the Perceptron algorithm.\n\n        \n0.0\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.threshold\n\n        \nThe threshold that separates the two classes. The value specified must be between zero and one.\n\n        \n The output is a probability.\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThe features of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted value (\ntrue/false\n)\n\n        \nBOOL\n\n    \n\n    \n\n        \nconfidenceLevel\n\n        \nThe probability of the prediction\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias and a \n0.5\n threshold learning rate to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted label (\ntrue/false\n) is emitted to the \nOutputStream\n streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The prediction(\ntrue/false\n) is emitted to the \nOutputStream\nstream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 3\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a default 0.0 bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, and \nattribute_2\n. The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nupdateBayesianClassification \n(Stream Processor)\n\n\nThis extension train a Bayesian multivariate logistic regression model. We can use this model for multi-class classification. This extension uses an improved version of stochastic variational inference.\n\n\n\nSyntax\n\n\nstreamingml:updateBayesianClassification(\nSTRING\n model.name, \nDOUBLE|INT\n no.of.classes, \nDOUBLE|INT\n model.target, \nINT\n model.samples, \nSTRING\n model.optimizer, \nDOUBLE\n learning.rate, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nno.of.classes\n\n        \nNumber of classes to be classified by the model.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.target\n\n        \nThe target attribute (dependant variable) of the input stream.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.samples\n\n        \nNumber of samples used to construct the gradients.\n\n        \n1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.optimizer\n\n        \nThe type of optimization used.\n\n        \nADAM\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the updater.\n\n        \n0.05\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nloss\n\n        \nWeight of the \nfeature.name\n of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updateBayesianClassification('model1', 3, attribute_4,attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Bayesian Softmax regression model named \nmodel1\n using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream. This models is capable of classifying 3 classes.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updateBayesianClassification('model1', 2, attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Bayesian Softmax regression model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream. This models act as a binary classifier.\n\n\n\nupdateBayesianRegression \n(Stream Processor)\n\n\nThis extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference.\n\n\n\nSyntax\n\n\nstreamingml:updateBayesianRegression(\nSTRING\n model.name, \nDOUBLE|INT\n model.target, \nINT\n model.samples, \nSTRING\n model.optimizer, \nDOUBLE\n learning.rate, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.target\n\n        \nThe target attribute (dependant variable) of the input stream.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.samples\n\n        \nNumber of samples used to construct the gradients.\n\n        \n1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.optimizer\n\n        \nThe type of optimization used\n\n        \nADAM\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the updater\n\n        \n0.05\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nloss\n\n        \n loss of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double );\n\nfrom StreamA#streamingml:updateBayesianRegression('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Bayesian Linear regression model named \nmodel1\n using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double );\n\nfrom StreamA#streamingml:updateBayesianRegression('model1', attribute_4, 2, 'NADAM', 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Bayesian Linear regression model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream. This model draws two samples during monte-carlo integration and uses NADAM optimizer.\n\n\n\nupdatePerceptronClassifier \n(Stream Processor)\n\n\nThis extension builds/updates a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:updatePerceptronClassifier(\nSTRING\n model.name, \nBOOL|STRING\n model.label, \nDOUBLE\n learning.rate, \nDOUBLE|INT\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built/updated.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.label\n\n        \nThe attribute of the label or the class of the dataset.\n\n        \n\n        \nBOOL\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the Perceptron algorithm.\n\n        \n0.1\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nfeatureWeight\n\n        \nWeight of the \nfeature.name\n of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a default \n0.1\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "2.0.0"
        }, 
        {
            "location": "/api/2.0.0/#api-docs-v200", 
            "text": "", 
            "title": "API Docs - v2.0.0"
        }, 
        {
            "location": "/api/2.0.0/#streamingml", 
            "text": "", 
            "title": "Streamingml"
        }, 
        {
            "location": "/api/2.0.0/#bayesianclassification-stream-processor", 
            "text": "This extension predicts using a Bayesian multivariate logistic regression model. This Bayesian model allows determining the uncertainty of each prediction by estimating the full-predictive distribution  Syntax  streamingml:bayesianClassification( STRING  model.name,  INT  prediction.samples,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used. \n         \n         STRING \n         No \n         No \n     \n     \n         prediction.samples \n         The number of samples to be drawn from the predictive distribution. Drawing more samples will improve the accuracy of the predictions \n         1000 \n         INT \n         Yes \n         No \n     \n     \n         model.features \n         The features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted label (string) \n         DOUBLE \n     \n     \n         confidence \n         Mean probability of the predictive distribution. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Bayesian Softmax regression model named  model1  to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted label is emitted to the  OutputStream  streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double).  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', 5000, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Bayesian Softmax regression model named  model1  to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The label is estimated based on 5000 samples from the predictive distribution. The predicted label is emitted to the  OutputStream  streamalong with the confidence of the prediction (mean of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double).", 
            "title": "bayesianClassification (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.0/#bayesianregression-stream-processor", 
            "text": "This extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution  Syntax  streamingml:bayesianRegression( STRING  model.name,  INT  prediction.samples,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used \n         \n         STRING \n         No \n         No \n     \n     \n         prediction.samples \n         The number of samples to be drawn to estimate the prediction \n         1000 \n         INT \n         Yes \n         No \n     \n     \n         model.features \n         The features of the model that need to be attributes of the stream \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted value (double) \n         DOUBLE \n     \n     \n         confidence \n         Inverse of the standard deviation of the predictive distribution \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Bayesian regression model named  model1  to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted value is emitted to the  OutputStream  streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction double, confidence double).", 
            "title": "bayesianRegression (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.0/#kmeansincremental-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm   Syntax  streamingml:kMeansIncremental( INT  no.of.clusters,  DOUBLE  decay.rate,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user doesnt give the decay rate so the default value will be used", 
            "title": "kMeansIncremental (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.0/#kmeansminibatch-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.).   Syntax  streamingml:kMeansMiniBatch( INT  no.of.clusters,  DOUBLE  decay.rate,  INT  maximum.iterations,  INT  no.of.events.to.retrain,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         maximum.iterations \n         Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change \n         50 \n         INT \n         Yes \n         No \n     \n     \n         no.of.events.to.retrain \n         number of events to recalculate cluster centers.  \n         20 \n         INT \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user has not specified hyper params. So default values will be used.", 
            "title": "kMeansMiniBatch (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.0/#perceptronclassifier-stream-processor", 
            "text": "This extension predicts using a linear binary classification Perceptron model.  Syntax  streamingml:perceptronClassifier( STRING  model.name,  DOUBLE  model.bias,  DOUBLE  model.threshold,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used. \n         \n         STRING \n         No \n         No \n     \n     \n         model.bias \n         The bias of the Perceptron algorithm. \n         0.0 \n         DOUBLE \n         No \n         No \n     \n     \n         model.threshold \n         The threshold that separates the two classes. The value specified must be between zero and one. \n          The output is a probability. \n         DOUBLE \n         No \n         No \n     \n     \n         model.features \n         The features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted value ( true/false ) \n         BOOL \n     \n     \n         confidenceLevel \n         The probability of the prediction \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias and a  0.5  threshold learning rate to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted label ( true/false ) is emitted to the  OutputStream  streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The prediction( true/false ) is emitted to the  OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 3  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a default 0.0 bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 , and  attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).", 
            "title": "perceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.0/#updatebayesianclassification-stream-processor", 
            "text": "This extension train a Bayesian multivariate logistic regression model. We can use this model for multi-class classification. This extension uses an improved version of stochastic variational inference.  Syntax  streamingml:updateBayesianClassification( STRING  model.name,  DOUBLE|INT  no.of.classes,  DOUBLE|INT  model.target,  INT  model.samples,  STRING  model.optimizer,  DOUBLE  learning.rate,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built. \n         \n         STRING \n         No \n         No \n     \n     \n         no.of.classes \n         Number of classes to be classified by the model. \n         \n         DOUBLE INT \n         No \n         No \n     \n     \n         model.target \n         The target attribute (dependant variable) of the input stream. \n         \n         DOUBLE INT \n         No \n         No \n     \n     \n         model.samples \n         Number of samples used to construct the gradients. \n         1 \n         INT \n         Yes \n         No \n     \n     \n         model.optimizer \n         The type of optimization used. \n         ADAM \n         STRING \n         Yes \n         No \n     \n     \n         learning.rate \n         The learning rate of the updater. \n         0.05 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         loss \n         Weight of the  feature.name  of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updateBayesianClassification('model1', 3, attribute_4,attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Bayesian Softmax regression model named  model1  using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream. This models is capable of classifying 3 classes.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updateBayesianClassification('model1', 2, attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Bayesian Softmax regression model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream. This models act as a binary classifier.", 
            "title": "updateBayesianClassification (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.0/#updatebayesianregression-stream-processor", 
            "text": "This extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference.  Syntax  streamingml:updateBayesianRegression( STRING  model.name,  DOUBLE|INT  model.target,  INT  model.samples,  STRING  model.optimizer,  DOUBLE  learning.rate,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built. \n         \n         STRING \n         No \n         No \n     \n     \n         model.target \n         The target attribute (dependant variable) of the input stream. \n         \n         DOUBLE INT \n         No \n         No \n     \n     \n         model.samples \n         Number of samples used to construct the gradients. \n         1 \n         INT \n         Yes \n         No \n     \n     \n         model.optimizer \n         The type of optimization used \n         ADAM \n         STRING \n         Yes \n         No \n     \n     \n         learning.rate \n         The learning rate of the updater \n         0.05 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         loss \n          loss of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double );\n\nfrom StreamA#streamingml:updateBayesianRegression('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Bayesian Linear regression model named  model1  using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double );\n\nfrom StreamA#streamingml:updateBayesianRegression('model1', attribute_4, 2, 'NADAM', 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Bayesian Linear regression model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream. This model draws two samples during monte-carlo integration and uses NADAM optimizer.", 
            "title": "updateBayesianRegression (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.0/#updateperceptronclassifier-stream-processor", 
            "text": "This extension builds/updates a linear binary classification Perceptron model.  Syntax  streamingml:updatePerceptronClassifier( STRING  model.name,  BOOL|STRING  model.label,  DOUBLE  learning.rate,  DOUBLE|INT  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built/updated. \n         \n         STRING \n         No \n         No \n     \n     \n         model.label \n         The attribute of the label or the class of the dataset. \n         \n         BOOL STRING \n         No \n         No \n     \n     \n         learning.rate \n         The learning rate of the Perceptron algorithm. \n         0.1 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         featureWeight \n         Weight of the  feature.name  of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a default  0.1  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "updatePerceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.1.1/", 
            "text": "API Docs - v1.1.1\n\n\nStreamingml\n\n\nbayesianClassification \n(Stream Processor)\n\n\nThis extension predicts using a Bayesian multivariate logistic regression model. This Bayesian model allows determining the uncertainty of each prediction by estimating the full-predictive distribution\n\n\n\nSyntax\n\n\nstreamingml:bayesianClassification(\nSTRING\n model.name, \nINT\n prediction.samples, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nprediction.samples\n\n        \nThe number of samples to be drawn from the predictive distribution. Drawing more samples will improve the accuracy of the predictions\n\n        \n1000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThe features of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted label (string)\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nconfidence\n\n        \nMean probability of the predictive distribution.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Bayesian Softmax regression model named \nmodel1\n to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted label is emitted to the \nOutputStream\n streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double).\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', 5000, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Bayesian Softmax regression model named \nmodel1\n to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The label is estimated based on 5000 samples from the predictive distribution. The predicted label is emitted to the \nOutputStream\n streamalong with the confidence of the prediction (mean of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double).\n\n\n\nbayesianRegression \n(Stream Processor)\n\n\nThis extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution\n\n\n\nSyntax\n\n\nstreamingml:bayesianRegression(\nSTRING\n model.name, \nINT\n prediction.samples, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nprediction.samples\n\n        \nThe number of samples to be drawn to estimate the prediction\n\n        \n1000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThe features of the model that need to be attributes of the stream\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted value (double)\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nconfidence\n\n        \nInverse of the standard deviation of the predictive distribution\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Bayesian regression model named \nmodel1\n to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted value is emitted to the \nOutputStream\n streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction double, confidence double).\n\n\n\nkMeansIncremental \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm \n\n\n\nSyntax\n\n\nstreamingml:kMeansIncremental(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user doesnt give the decay rate so the default value will be used\n\n\n\nkMeansMiniBatch \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). \n\n\n\nSyntax\n\n\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nINT\n maximum.iterations, \nINT\n no.of.events.to.retrain, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmaximum.iterations\n\n        \nNumber of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change\n\n        \n50\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nno.of.events.to.retrain\n\n        \nnumber of events to recalculate cluster centers. \n\n        \n20\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user has not specified hyper params. So default values will be used.\n\n\n\nperceptronClassifier \n(Stream Processor)\n\n\nThis extension predicts using a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:perceptronClassifier(\nSTRING\n model.name, \nDOUBLE\n model.bias, \nDOUBLE\n model.threshold, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.bias\n\n        \nThe bias of the Perceptron algorithm.\n\n        \n0.0\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.threshold\n\n        \nThe threshold that separates the two classes. The value specified must be between zero and one.\n\n        \n The output is a probability.\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThe features of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted value (\ntrue/false\n)\n\n        \nBOOL\n\n    \n\n    \n\n        \nconfidenceLevel\n\n        \nThe probability of the prediction\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias and a \n0.5\n threshold learning rate to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted label (\ntrue/false\n) is emitted to the \nOutputStream\n streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The prediction(\ntrue/false\n) is emitted to the \nOutputStream\nstream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 3\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a default 0.0 bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, and \nattribute_2\n. The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nupdateBayesianClassification \n(Stream Processor)\n\n\nThis extension train a Bayesian multivariate logistic regression model. We can use this model for multi-class classification. This extension uses an improved version of stochastic variational inference.\n\n\n\nSyntax\n\n\nstreamingml:updateBayesianClassification(\nSTRING\n model.name, \nDOUBLE|INT\n no.of.classes, \nDOUBLE|INT\n model.target, \nINT\n model.samples, \nSTRING\n model.optimizer, \nDOUBLE\n learning.rate, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nno.of.classes\n\n        \nNumber of classes to be classified by the model.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.target\n\n        \nThe target attribute (dependant variable) of the input stream.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.samples\n\n        \nNumber of samples used to construct the gradients.\n\n        \n1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.optimizer\n\n        \nThe type of optimization used.\n\n        \nADAM\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the updater.\n\n        \n0.05\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nloss\n\n        \nWeight of the \nfeature.name\n of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updateBayesianClassification('model1', 3, attribute_4,attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Bayesian Softmax regression model named \nmodel1\n using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream. This models is capable of classifying 3 classes.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updateBayesianClassification('model1', 2, attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Bayesian Softmax regression model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream. This models act as a binary classifier.\n\n\n\nupdateBayesianRegression \n(Stream Processor)\n\n\nThis extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference.\n\n\n\nSyntax\n\n\nstreamingml:updateBayesianRegression(\nSTRING\n model.name, \nDOUBLE|INT\n model.target, \nINT\n model.samples, \nSTRING\n model.optimizer, \nDOUBLE\n learning.rate, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.target\n\n        \nThe target attribute (dependant variable) of the input stream.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.samples\n\n        \nNumber of samples used to construct the gradients.\n\n        \n1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.optimizer\n\n        \nThe type of optimization used\n\n        \nADAM\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the updater\n\n        \n0.05\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nloss\n\n        \n loss of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double );\n\nfrom StreamA#streamingml:updateBayesianRegression('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Bayesian Linear regression model named \nmodel1\n using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double );\n\nfrom StreamA#streamingml:updateBayesianRegression('model1', attribute_4, 2, 'NADAM', 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Bayesian Linear regression model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream. This model draws two samples during monte-carlo integration and uses NADAM optimizer.\n\n\n\nupdatePerceptronClassifier \n(Stream Processor)\n\n\nThis extension builds/updates a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:updatePerceptronClassifier(\nSTRING\n model.name, \nBOOL|STRING\n model.label, \nDOUBLE\n learning.rate, \nDOUBLE|INT\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built/updated.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.label\n\n        \nThe attribute of the label or the class of the dataset.\n\n        \n\n        \nBOOL\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the Perceptron algorithm.\n\n        \n0.1\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nfeatureWeight\n\n        \nWeight of the \nfeature.name\n of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a default \n0.1\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "1.1.1"
        }, 
        {
            "location": "/api/1.1.1/#api-docs-v111", 
            "text": "", 
            "title": "API Docs - v1.1.1"
        }, 
        {
            "location": "/api/1.1.1/#streamingml", 
            "text": "", 
            "title": "Streamingml"
        }, 
        {
            "location": "/api/1.1.1/#bayesianclassification-stream-processor", 
            "text": "This extension predicts using a Bayesian multivariate logistic regression model. This Bayesian model allows determining the uncertainty of each prediction by estimating the full-predictive distribution  Syntax  streamingml:bayesianClassification( STRING  model.name,  INT  prediction.samples,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used. \n         \n         STRING \n         No \n         No \n     \n     \n         prediction.samples \n         The number of samples to be drawn from the predictive distribution. Drawing more samples will improve the accuracy of the predictions \n         1000 \n         INT \n         Yes \n         No \n     \n     \n         model.features \n         The features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted label (string) \n         DOUBLE \n     \n     \n         confidence \n         Mean probability of the predictive distribution. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Bayesian Softmax regression model named  model1  to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted label is emitted to the  OutputStream  streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double).  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', 5000, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Bayesian Softmax regression model named  model1  to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The label is estimated based on 5000 samples from the predictive distribution. The predicted label is emitted to the  OutputStream  streamalong with the confidence of the prediction (mean of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double).", 
            "title": "bayesianClassification (Stream Processor)"
        }, 
        {
            "location": "/api/1.1.1/#bayesianregression-stream-processor", 
            "text": "This extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution  Syntax  streamingml:bayesianRegression( STRING  model.name,  INT  prediction.samples,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used \n         \n         STRING \n         No \n         No \n     \n     \n         prediction.samples \n         The number of samples to be drawn to estimate the prediction \n         1000 \n         INT \n         Yes \n         No \n     \n     \n         model.features \n         The features of the model that need to be attributes of the stream \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted value (double) \n         DOUBLE \n     \n     \n         confidence \n         Inverse of the standard deviation of the predictive distribution \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Bayesian regression model named  model1  to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted value is emitted to the  OutputStream  streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction double, confidence double).", 
            "title": "bayesianRegression (Stream Processor)"
        }, 
        {
            "location": "/api/1.1.1/#kmeansincremental-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm   Syntax  streamingml:kMeansIncremental( INT  no.of.clusters,  DOUBLE  decay.rate,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user doesnt give the decay rate so the default value will be used", 
            "title": "kMeansIncremental (Stream Processor)"
        }, 
        {
            "location": "/api/1.1.1/#kmeansminibatch-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.).   Syntax  streamingml:kMeansMiniBatch( INT  no.of.clusters,  DOUBLE  decay.rate,  INT  maximum.iterations,  INT  no.of.events.to.retrain,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         maximum.iterations \n         Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change \n         50 \n         INT \n         Yes \n         No \n     \n     \n         no.of.events.to.retrain \n         number of events to recalculate cluster centers.  \n         20 \n         INT \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user has not specified hyper params. So default values will be used.", 
            "title": "kMeansMiniBatch (Stream Processor)"
        }, 
        {
            "location": "/api/1.1.1/#perceptronclassifier-stream-processor", 
            "text": "This extension predicts using a linear binary classification Perceptron model.  Syntax  streamingml:perceptronClassifier( STRING  model.name,  DOUBLE  model.bias,  DOUBLE  model.threshold,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used. \n         \n         STRING \n         No \n         No \n     \n     \n         model.bias \n         The bias of the Perceptron algorithm. \n         0.0 \n         DOUBLE \n         No \n         No \n     \n     \n         model.threshold \n         The threshold that separates the two classes. The value specified must be between zero and one. \n          The output is a probability. \n         DOUBLE \n         No \n         No \n     \n     \n         model.features \n         The features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted value ( true/false ) \n         BOOL \n     \n     \n         confidenceLevel \n         The probability of the prediction \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias and a  0.5  threshold learning rate to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted label ( true/false ) is emitted to the  OutputStream  streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The prediction( true/false ) is emitted to the  OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 3  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a default 0.0 bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 , and  attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).", 
            "title": "perceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.1.1/#updatebayesianclassification-stream-processor", 
            "text": "This extension train a Bayesian multivariate logistic regression model. We can use this model for multi-class classification. This extension uses an improved version of stochastic variational inference.  Syntax  streamingml:updateBayesianClassification( STRING  model.name,  DOUBLE|INT  no.of.classes,  DOUBLE|INT  model.target,  INT  model.samples,  STRING  model.optimizer,  DOUBLE  learning.rate,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built. \n         \n         STRING \n         No \n         No \n     \n     \n         no.of.classes \n         Number of classes to be classified by the model. \n         \n         DOUBLE INT \n         No \n         No \n     \n     \n         model.target \n         The target attribute (dependant variable) of the input stream. \n         \n         DOUBLE INT \n         No \n         No \n     \n     \n         model.samples \n         Number of samples used to construct the gradients. \n         1 \n         INT \n         Yes \n         No \n     \n     \n         model.optimizer \n         The type of optimization used. \n         ADAM \n         STRING \n         Yes \n         No \n     \n     \n         learning.rate \n         The learning rate of the updater. \n         0.05 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         loss \n         Weight of the  feature.name  of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updateBayesianClassification('model1', 3, attribute_4,attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Bayesian Softmax regression model named  model1  using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream. This models is capable of classifying 3 classes.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updateBayesianClassification('model1', 2, attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Bayesian Softmax regression model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream. This models act as a binary classifier.", 
            "title": "updateBayesianClassification (Stream Processor)"
        }, 
        {
            "location": "/api/1.1.1/#updatebayesianregression-stream-processor", 
            "text": "This extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference.  Syntax  streamingml:updateBayesianRegression( STRING  model.name,  DOUBLE|INT  model.target,  INT  model.samples,  STRING  model.optimizer,  DOUBLE  learning.rate,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built. \n         \n         STRING \n         No \n         No \n     \n     \n         model.target \n         The target attribute (dependant variable) of the input stream. \n         \n         DOUBLE INT \n         No \n         No \n     \n     \n         model.samples \n         Number of samples used to construct the gradients. \n         1 \n         INT \n         Yes \n         No \n     \n     \n         model.optimizer \n         The type of optimization used \n         ADAM \n         STRING \n         Yes \n         No \n     \n     \n         learning.rate \n         The learning rate of the updater \n         0.05 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         loss \n          loss of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double );\n\nfrom StreamA#streamingml:updateBayesianRegression('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Bayesian Linear regression model named  model1  using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double );\n\nfrom StreamA#streamingml:updateBayesianRegression('model1', attribute_4, 2, 'NADAM', 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Bayesian Linear regression model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream. This model draws two samples during monte-carlo integration and uses NADAM optimizer.", 
            "title": "updateBayesianRegression (Stream Processor)"
        }, 
        {
            "location": "/api/1.1.1/#updateperceptronclassifier-stream-processor", 
            "text": "This extension builds/updates a linear binary classification Perceptron model.  Syntax  streamingml:updatePerceptronClassifier( STRING  model.name,  BOOL|STRING  model.label,  DOUBLE  learning.rate,  DOUBLE|INT  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built/updated. \n         \n         STRING \n         No \n         No \n     \n     \n         model.label \n         The attribute of the label or the class of the dataset. \n         \n         BOOL STRING \n         No \n         No \n     \n     \n         learning.rate \n         The learning rate of the Perceptron algorithm. \n         0.1 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         featureWeight \n         Weight of the  feature.name  of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a default  0.1  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "updatePerceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.1.0/", 
            "text": "API Docs - v1.1.0\n\n\nStreamingml\n\n\nbayesianClassification \n(Stream Processor)\n\n\nThis extension predicts using a Bayesian multivariate logistic regression model. This Bayesian model allows determining the uncertainty of each prediction by estimating the full-predictive distribution\n\n\n\nSyntax\n\n\nstreamingml:bayesianClassification(\nSTRING\n model.name, \nINT\n prediction.samples, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nprediction.samples\n\n        \nThe number of samples to be drawn from the predictive distribution. Drawing more samples will improve the accuracy of the predictions\n\n        \n1000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThe features of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted label (string)\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nconfidence\n\n        \nMean probability of the predictive distribution.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Bayesian Softmax regression model named \nmodel1\n to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted label is emitted to the \nOutputStream\n streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double).\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', 5000, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Bayesian Softmax regression model named \nmodel1\n to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The label is estimated based on 5000 samples from the predictive distribution. The predicted label is emitted to the \nOutputStream\n streamalong with the confidence of the prediction (mean of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double).\n\n\n\nbayesianRegression \n(Stream Processor)\n\n\nThis extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution\n\n\n\nSyntax\n\n\nstreamingml:bayesianRegression(\nSTRING\n model.name, \nINT\n prediction.samples, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nprediction.samples\n\n        \nThe number of samples to be drawn to estimate the prediction\n\n        \n1000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThe features of the model that need to be attributes of the stream\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted value (double)\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nconfidence\n\n        \nInverse of the standard deviation of the predictive distribution\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Bayesian regression model named \nmodel1\n to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted value is emitted to the \nOutputStream\n streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction double, confidence double).\n\n\n\nkMeansIncremental \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm \n\n\n\nSyntax\n\n\nstreamingml:kMeansIncremental(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user doesnt give the decay rate so the default value will be used\n\n\n\nkMeansMiniBatch \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). \n\n\n\nSyntax\n\n\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nINT\n maximum.iterations, \nINT\n no.of.events.to.retrain, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmaximum.iterations\n\n        \nNumber of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change\n\n        \n50\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nno.of.events.to.retrain\n\n        \nnumber of events to recalculate cluster centers. \n\n        \n20\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user has not specified hyper params. So default values will be used.\n\n\n\nperceptronClassifier \n(Stream Processor)\n\n\nThis extension predicts using a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:perceptronClassifier(\nSTRING\n model.name, \nDOUBLE\n model.bias, \nDOUBLE\n model.threshold, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.bias\n\n        \nThe bias of the Perceptron algorithm.\n\n        \n0.0\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.threshold\n\n        \nThe threshold that separates the two classes. The value specified must be between zero and one.\n\n        \n The output is a probability.\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThe features of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted value (\ntrue/false\n)\n\n        \nBOOL\n\n    \n\n    \n\n        \nconfidenceLevel\n\n        \nThe probability of the prediction\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias and a \n0.5\n threshold learning rate to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted label (\ntrue/false\n) is emitted to the \nOutputStream\n streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The prediction(\ntrue/false\n) is emitted to the \nOutputStream\nstream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 3\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a default 0.0 bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, and \nattribute_2\n. The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nupdateBayesianClassification \n(Stream Processor)\n\n\nThis extension train a Bayesian multivariate logistic regression model. We can use this model for multi-class classification. This extension uses an improved version of stochastic variational inference.\n\n\n\nSyntax\n\n\nstreamingml:updateBayesianClassification(\nSTRING\n model.name, \nDOUBLE|INT\n no.of.classes, \nDOUBLE|INT\n model.target, \nINT\n model.samples, \nSTRING\n model.optimizer, \nDOUBLE\n learning.rate, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nno.of.classes\n\n        \nNumber of classes to be classified by the model.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.target\n\n        \nThe target attribute (dependant variable) of the input stream.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.samples\n\n        \nNumber of samples used to construct the gradients.\n\n        \n1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.optimizer\n\n        \nThe type of optimization used.\n\n        \nADAM\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the updater.\n\n        \n0.05\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nloss\n\n        \nWeight of the \nfeature.name\n of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updateBayesianClassification('model1', 3, attribute_4,attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Bayesian Softmax regression model named \nmodel1\n using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream. This models is capable of classifying 3 classes.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updateBayesianClassification('model1', 2, attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Bayesian Softmax regression model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream. This models act as a binary classifier.\n\n\n\nupdateBayesianRegression \n(Stream Processor)\n\n\nThis extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference.\n\n\n\nSyntax\n\n\nstreamingml:updateBayesianRegression(\nSTRING\n model.name, \nDOUBLE|INT\n model.target, \nINT\n model.samples, \nSTRING\n model.optimizer, \nDOUBLE\n learning.rate, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.target\n\n        \nThe target attribute (dependant variable) of the input stream.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.samples\n\n        \nNumber of samples used to construct the gradients.\n\n        \n1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.optimizer\n\n        \nThe type of optimization used\n\n        \nADAM\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the updater\n\n        \n0.05\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nloss\n\n        \n loss of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double );\n\nfrom StreamA#streamingml:updateBayesianRegression('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Bayesian Linear regression model named \nmodel1\n using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double );\n\nfrom StreamA#streamingml:updateBayesianRegression('model1', attribute_4, 2, 'NADAM', 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Bayesian Linear regression model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream. This model draws two samples during monte-carlo integration and uses NADAM optimizer.\n\n\n\nupdatePerceptronClassifier \n(Stream Processor)\n\n\nThis extension builds/updates a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:updatePerceptronClassifier(\nSTRING\n model.name, \nBOOL|STRING\n model.label, \nDOUBLE\n learning.rate, \nDOUBLE|INT\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built/updated.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.label\n\n        \nThe attribute of the label or the class of the dataset.\n\n        \n\n        \nBOOL\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the Perceptron algorithm.\n\n        \n0.1\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nfeatureWeight\n\n        \nWeight of the \nfeature.name\n of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a default \n0.1\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "1.1.0"
        }, 
        {
            "location": "/api/1.1.0/#api-docs-v110", 
            "text": "", 
            "title": "API Docs - v1.1.0"
        }, 
        {
            "location": "/api/1.1.0/#streamingml", 
            "text": "", 
            "title": "Streamingml"
        }, 
        {
            "location": "/api/1.1.0/#bayesianclassification-stream-processor", 
            "text": "This extension predicts using a Bayesian multivariate logistic regression model. This Bayesian model allows determining the uncertainty of each prediction by estimating the full-predictive distribution  Syntax  streamingml:bayesianClassification( STRING  model.name,  INT  prediction.samples,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used. \n         \n         STRING \n         No \n         No \n     \n     \n         prediction.samples \n         The number of samples to be drawn from the predictive distribution. Drawing more samples will improve the accuracy of the predictions \n         1000 \n         INT \n         Yes \n         No \n     \n     \n         model.features \n         The features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted label (string) \n         DOUBLE \n     \n     \n         confidence \n         Mean probability of the predictive distribution. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Bayesian Softmax regression model named  model1  to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted label is emitted to the  OutputStream  streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double).  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', 5000, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Bayesian Softmax regression model named  model1  to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The label is estimated based on 5000 samples from the predictive distribution. The predicted label is emitted to the  OutputStream  streamalong with the confidence of the prediction (mean of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double).", 
            "title": "bayesianClassification (Stream Processor)"
        }, 
        {
            "location": "/api/1.1.0/#bayesianregression-stream-processor", 
            "text": "This extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution  Syntax  streamingml:bayesianRegression( STRING  model.name,  INT  prediction.samples,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used \n         \n         STRING \n         No \n         No \n     \n     \n         prediction.samples \n         The number of samples to be drawn to estimate the prediction \n         1000 \n         INT \n         Yes \n         No \n     \n     \n         model.features \n         The features of the model that need to be attributes of the stream \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted value (double) \n         DOUBLE \n     \n     \n         confidence \n         Inverse of the standard deviation of the predictive distribution \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Bayesian regression model named  model1  to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted value is emitted to the  OutputStream  streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction double, confidence double).", 
            "title": "bayesianRegression (Stream Processor)"
        }, 
        {
            "location": "/api/1.1.0/#kmeansincremental-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm   Syntax  streamingml:kMeansIncremental( INT  no.of.clusters,  DOUBLE  decay.rate,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user doesnt give the decay rate so the default value will be used", 
            "title": "kMeansIncremental (Stream Processor)"
        }, 
        {
            "location": "/api/1.1.0/#kmeansminibatch-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.).   Syntax  streamingml:kMeansMiniBatch( INT  no.of.clusters,  DOUBLE  decay.rate,  INT  maximum.iterations,  INT  no.of.events.to.retrain,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         maximum.iterations \n         Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change \n         50 \n         INT \n         Yes \n         No \n     \n     \n         no.of.events.to.retrain \n         number of events to recalculate cluster centers.  \n         20 \n         INT \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user has not specified hyper params. So default values will be used.", 
            "title": "kMeansMiniBatch (Stream Processor)"
        }, 
        {
            "location": "/api/1.1.0/#perceptronclassifier-stream-processor", 
            "text": "This extension predicts using a linear binary classification Perceptron model.  Syntax  streamingml:perceptronClassifier( STRING  model.name,  DOUBLE  model.bias,  DOUBLE  model.threshold,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used. \n         \n         STRING \n         No \n         No \n     \n     \n         model.bias \n         The bias of the Perceptron algorithm. \n         0.0 \n         DOUBLE \n         No \n         No \n     \n     \n         model.threshold \n         The threshold that separates the two classes. The value specified must be between zero and one. \n          The output is a probability. \n         DOUBLE \n         No \n         No \n     \n     \n         model.features \n         The features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted value ( true/false ) \n         BOOL \n     \n     \n         confidenceLevel \n         The probability of the prediction \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias and a  0.5  threshold learning rate to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted label ( true/false ) is emitted to the  OutputStream  streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The prediction( true/false ) is emitted to the  OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 3  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a default 0.0 bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 , and  attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).", 
            "title": "perceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.1.0/#updatebayesianclassification-stream-processor", 
            "text": "This extension train a Bayesian multivariate logistic regression model. We can use this model for multi-class classification. This extension uses an improved version of stochastic variational inference.  Syntax  streamingml:updateBayesianClassification( STRING  model.name,  DOUBLE|INT  no.of.classes,  DOUBLE|INT  model.target,  INT  model.samples,  STRING  model.optimizer,  DOUBLE  learning.rate,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built. \n         \n         STRING \n         No \n         No \n     \n     \n         no.of.classes \n         Number of classes to be classified by the model. \n         \n         DOUBLE INT \n         No \n         No \n     \n     \n         model.target \n         The target attribute (dependant variable) of the input stream. \n         \n         DOUBLE INT \n         No \n         No \n     \n     \n         model.samples \n         Number of samples used to construct the gradients. \n         1 \n         INT \n         Yes \n         No \n     \n     \n         model.optimizer \n         The type of optimization used. \n         ADAM \n         STRING \n         Yes \n         No \n     \n     \n         learning.rate \n         The learning rate of the updater. \n         0.05 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         loss \n         Weight of the  feature.name  of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updateBayesianClassification('model1', 3, attribute_4,attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Bayesian Softmax regression model named  model1  using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream. This models is capable of classifying 3 classes.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updateBayesianClassification('model1', 2, attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Bayesian Softmax regression model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream. This models act as a binary classifier.", 
            "title": "updateBayesianClassification (Stream Processor)"
        }, 
        {
            "location": "/api/1.1.0/#updatebayesianregression-stream-processor", 
            "text": "This extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference.  Syntax  streamingml:updateBayesianRegression( STRING  model.name,  DOUBLE|INT  model.target,  INT  model.samples,  STRING  model.optimizer,  DOUBLE  learning.rate,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built. \n         \n         STRING \n         No \n         No \n     \n     \n         model.target \n         The target attribute (dependant variable) of the input stream. \n         \n         DOUBLE INT \n         No \n         No \n     \n     \n         model.samples \n         Number of samples used to construct the gradients. \n         1 \n         INT \n         Yes \n         No \n     \n     \n         model.optimizer \n         The type of optimization used \n         ADAM \n         STRING \n         Yes \n         No \n     \n     \n         learning.rate \n         The learning rate of the updater \n         0.05 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         loss \n          loss of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double );\n\nfrom StreamA#streamingml:updateBayesianRegression('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Bayesian Linear regression model named  model1  using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double );\n\nfrom StreamA#streamingml:updateBayesianRegression('model1', attribute_4, 2, 'NADAM', 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Bayesian Linear regression model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream. This model draws two samples during monte-carlo integration and uses NADAM optimizer.", 
            "title": "updateBayesianRegression (Stream Processor)"
        }, 
        {
            "location": "/api/1.1.0/#updateperceptronclassifier-stream-processor", 
            "text": "This extension builds/updates a linear binary classification Perceptron model.  Syntax  streamingml:updatePerceptronClassifier( STRING  model.name,  BOOL|STRING  model.label,  DOUBLE  learning.rate,  DOUBLE|INT  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built/updated. \n         \n         STRING \n         No \n         No \n     \n     \n         model.label \n         The attribute of the label or the class of the dataset. \n         \n         BOOL STRING \n         No \n         No \n     \n     \n         learning.rate \n         The learning rate of the Perceptron algorithm. \n         0.1 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         featureWeight \n         Weight of the  feature.name  of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a default  0.1  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "updatePerceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.22/", 
            "text": "API Docs - v1.0.22\n\n\nStreamingml\n\n\nkMeansIncremental \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm \n\n\n\nSyntax\n\n\nstreamingml:kMeansIncremental(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user doesnt give the decay rate so the default value will be used\n\n\n\nkMeansMiniBatch \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). \n\n\n\nSyntax\n\n\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nINT\n maximum.iterations, \nINT\n no.of.events.to.retrain, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmaximum.iterations\n\n        \nNumber of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change\n\n        \n50\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nno.of.events.to.retrain\n\n        \nnumber of events to recalculate cluster centers. \n\n        \n20\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user has not specified hyper params. So default values will be used.\n\n\n\nperceptronClassifier \n(Stream Processor)\n\n\nThis extension predicts using a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:perceptronClassifier(\nSTRING\n model.name, \nDOUBLE\n model.bias, \nDOUBLE\n model.threshold, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.bias\n\n        \nThe bias of the Perceptron algorithm.\n\n        \n0.0\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.threshold\n\n        \nThe threshold that separates the two classes. The value specified must be between zero and one.\n\n        \n The output is a probability.\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThe features of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted value (\ntrue/false\n)\n\n        \nBOOL\n\n    \n\n    \n\n        \nconfidenceLevel\n\n        \nThe probability of the prediction\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias and a \n0.5\n threshold learning rate to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted label (\ntrue/false\n) is emitted to the \nOutputStream\n streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The prediction(\ntrue/false\n) is emitted to the \nOutputStream\nstream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 3\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a default 0.0 bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, and \nattribute_2\n. The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nupdatePerceptronClassifier \n(Stream Processor)\n\n\nThis extension builds/updates a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:updatePerceptronClassifier(\nSTRING\n model.name, \nBOOL|STRING\n model.label, \nDOUBLE\n learning.rate, \nDOUBLE|INT\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built/updated.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.label\n\n        \nThe attribute of the label or the class of the dataset.\n\n        \n\n        \nBOOL\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the Perceptron algorithm.\n\n        \n0.1\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nfeatureWeight\n\n        \nWeight of the \nfeature.name\n of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a default \n0.1\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "1.0.22"
        }, 
        {
            "location": "/api/1.0.22/#api-docs-v1022", 
            "text": "", 
            "title": "API Docs - v1.0.22"
        }, 
        {
            "location": "/api/1.0.22/#streamingml", 
            "text": "", 
            "title": "Streamingml"
        }, 
        {
            "location": "/api/1.0.22/#kmeansincremental-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm   Syntax  streamingml:kMeansIncremental( INT  no.of.clusters,  DOUBLE  decay.rate,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user doesnt give the decay rate so the default value will be used", 
            "title": "kMeansIncremental (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.22/#kmeansminibatch-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.).   Syntax  streamingml:kMeansMiniBatch( INT  no.of.clusters,  DOUBLE  decay.rate,  INT  maximum.iterations,  INT  no.of.events.to.retrain,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         maximum.iterations \n         Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change \n         50 \n         INT \n         Yes \n         No \n     \n     \n         no.of.events.to.retrain \n         number of events to recalculate cluster centers.  \n         20 \n         INT \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user has not specified hyper params. So default values will be used.", 
            "title": "kMeansMiniBatch (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.22/#perceptronclassifier-stream-processor", 
            "text": "This extension predicts using a linear binary classification Perceptron model.  Syntax  streamingml:perceptronClassifier( STRING  model.name,  DOUBLE  model.bias,  DOUBLE  model.threshold,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used. \n         \n         STRING \n         No \n         No \n     \n     \n         model.bias \n         The bias of the Perceptron algorithm. \n         0.0 \n         DOUBLE \n         No \n         No \n     \n     \n         model.threshold \n         The threshold that separates the two classes. The value specified must be between zero and one. \n          The output is a probability. \n         DOUBLE \n         No \n         No \n     \n     \n         model.features \n         The features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted value ( true/false ) \n         BOOL \n     \n     \n         confidenceLevel \n         The probability of the prediction \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias and a  0.5  threshold learning rate to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted label ( true/false ) is emitted to the  OutputStream  streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The prediction( true/false ) is emitted to the  OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 3  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a default 0.0 bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 , and  attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).", 
            "title": "perceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.22/#updateperceptronclassifier-stream-processor", 
            "text": "This extension builds/updates a linear binary classification Perceptron model.  Syntax  streamingml:updatePerceptronClassifier( STRING  model.name,  BOOL|STRING  model.label,  DOUBLE  learning.rate,  DOUBLE|INT  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built/updated. \n         \n         STRING \n         No \n         No \n     \n     \n         model.label \n         The attribute of the label or the class of the dataset. \n         \n         BOOL STRING \n         No \n         No \n     \n     \n         learning.rate \n         The learning rate of the Perceptron algorithm. \n         0.1 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         featureWeight \n         Weight of the  feature.name  of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a default  0.1  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "updatePerceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.21/", 
            "text": "API Docs - v1.0.21\n\n\nStreamingml\n\n\nkMeansIncremental \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm \n\n\n\nSyntax\n\n\nstreamingml:kMeansIncremental(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user doesnt give the decay rate so the default value will be used\n\n\n\nkMeansMiniBatch \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). \n\n\n\nSyntax\n\n\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nINT\n maximum.iterations, \nINT\n no.of.events.to.retrain, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmaximum.iterations\n\n        \nNumber of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change\n\n        \n50\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nno.of.events.to.retrain\n\n        \nnumber of events to recalculate cluster centers. \n\n        \n20\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user has not specified hyper params. So default values will be used.\n\n\n\nperceptronClassifier \n(Stream Processor)\n\n\nThis extension predicts using a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:perceptronClassifier(\nSTRING\n model.name, \nDOUBLE\n model.bias, \nDOUBLE\n model.threshold, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.bias\n\n        \nThe bias of the Perceptron algorithm.\n\n        \n0.0\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.threshold\n\n        \nThe threshold that separates the two classes. The value specified must be between zero and one.\n\n        \n The output is a probability.\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThe features of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted value (\ntrue/false\n)\n\n        \nBOOL\n\n    \n\n    \n\n        \nconfidenceLevel\n\n        \nThe probability of the prediction\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias and a \n0.5\n threshold learning rate to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted label (\ntrue/false\n) is emitted to the \nOutputStream\n streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The prediction(\ntrue/false\n) is emitted to the \nOutputStream\nstream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 3\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a default 0.0 bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, and \nattribute_2\n. The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nupdatePerceptronClassifier \n(Stream Processor)\n\n\nThis extension builds/updates a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:updatePerceptronClassifier(\nSTRING\n model.name, \nBOOL|STRING\n model.label, \nDOUBLE\n learning.rate, \nDOUBLE|INT\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built/updated.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.label\n\n        \nThe attribute of the label or the class of the dataset.\n\n        \n\n        \nBOOL\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the Perceptron algorithm.\n\n        \n0.1\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nfeatureWeight\n\n        \nWeight of the \nfeature.name\n of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a default \n0.1\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "1.0.21"
        }, 
        {
            "location": "/api/1.0.21/#api-docs-v1021", 
            "text": "", 
            "title": "API Docs - v1.0.21"
        }, 
        {
            "location": "/api/1.0.21/#streamingml", 
            "text": "", 
            "title": "Streamingml"
        }, 
        {
            "location": "/api/1.0.21/#kmeansincremental-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm   Syntax  streamingml:kMeansIncremental( INT  no.of.clusters,  DOUBLE  decay.rate,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user doesnt give the decay rate so the default value will be used", 
            "title": "kMeansIncremental (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.21/#kmeansminibatch-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.).   Syntax  streamingml:kMeansMiniBatch( INT  no.of.clusters,  DOUBLE  decay.rate,  INT  maximum.iterations,  INT  no.of.events.to.retrain,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         maximum.iterations \n         Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change \n         50 \n         INT \n         Yes \n         No \n     \n     \n         no.of.events.to.retrain \n         number of events to recalculate cluster centers.  \n         20 \n         INT \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user has not specified hyper params. So default values will be used.", 
            "title": "kMeansMiniBatch (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.21/#perceptronclassifier-stream-processor", 
            "text": "This extension predicts using a linear binary classification Perceptron model.  Syntax  streamingml:perceptronClassifier( STRING  model.name,  DOUBLE  model.bias,  DOUBLE  model.threshold,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used. \n         \n         STRING \n         No \n         No \n     \n     \n         model.bias \n         The bias of the Perceptron algorithm. \n         0.0 \n         DOUBLE \n         No \n         No \n     \n     \n         model.threshold \n         The threshold that separates the two classes. The value specified must be between zero and one. \n          The output is a probability. \n         DOUBLE \n         No \n         No \n     \n     \n         model.features \n         The features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted value ( true/false ) \n         BOOL \n     \n     \n         confidenceLevel \n         The probability of the prediction \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias and a  0.5  threshold learning rate to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted label ( true/false ) is emitted to the  OutputStream  streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The prediction( true/false ) is emitted to the  OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 3  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a default 0.0 bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 , and  attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).", 
            "title": "perceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.21/#updateperceptronclassifier-stream-processor", 
            "text": "This extension builds/updates a linear binary classification Perceptron model.  Syntax  streamingml:updatePerceptronClassifier( STRING  model.name,  BOOL|STRING  model.label,  DOUBLE  learning.rate,  DOUBLE|INT  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built/updated. \n         \n         STRING \n         No \n         No \n     \n     \n         model.label \n         The attribute of the label or the class of the dataset. \n         \n         BOOL STRING \n         No \n         No \n     \n     \n         learning.rate \n         The learning rate of the Perceptron algorithm. \n         0.1 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         featureWeight \n         Weight of the  feature.name  of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a default  0.1  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "updatePerceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.20/", 
            "text": "API Docs - v1.0.20\n\n\nStreamingml\n\n\nkMeansIncremental \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm \n\n\n\nSyntax\n\n\nstreamingml:kMeansIncremental(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user doesnt give the decay rate so the default value will be used\n\n\n\nkMeansMiniBatch \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). \n\n\n\nSyntax\n\n\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nINT\n maximum.iterations, \nINT\n no.of.events.to.retrain, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmaximum.iterations\n\n        \nNumber of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change\n\n        \n50\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nno.of.events.to.retrain\n\n        \nnumber of events to recalculate cluster centers. \n\n        \n20\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user has not specified hyper params. So default values will be used.\n\n\n\nperceptronClassifier \n(Stream Processor)\n\n\nThis extension predicts using a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:perceptronClassifier(\nSTRING\n model.name, \nDOUBLE\n model.bias, \nDOUBLE\n model.threshold, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.bias\n\n        \nThe bias of the Perceptron algorithm.\n\n        \n0.0\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.threshold\n\n        \nThe threshold that separates the two classes. The value specified must be between zero and one.\n\n        \n The output is a probability.\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThe features of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted value (\ntrue/false\n)\n\n        \nBOOL\n\n    \n\n    \n\n        \nconfidenceLevel\n\n        \nThe probability of the prediction\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias and a \n0.5\n threshold learning rate to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted label (\ntrue/false\n) is emitted to the \nOutputStream\n streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The prediction(\ntrue/false\n) is emitted to the \nOutputStream\nstream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 3\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a default 0.0 bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, and \nattribute_2\n. The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nupdatePerceptronClassifier \n(Stream Processor)\n\n\nThis extension builds/updates a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:updatePerceptronClassifier(\nSTRING\n model.name, \nBOOL|STRING\n model.label, \nDOUBLE\n learning.rate, \nDOUBLE|INT\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built/updated.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.label\n\n        \nThe attribute of the label or the class of the dataset.\n\n        \n\n        \nBOOL\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the Perceptron algorithm.\n\n        \n0.1\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nfeatureWeight\n\n        \nWeight of the \nfeature.name\n of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a default \n0.1\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "1.0.20"
        }, 
        {
            "location": "/api/1.0.20/#api-docs-v1020", 
            "text": "", 
            "title": "API Docs - v1.0.20"
        }, 
        {
            "location": "/api/1.0.20/#streamingml", 
            "text": "", 
            "title": "Streamingml"
        }, 
        {
            "location": "/api/1.0.20/#kmeansincremental-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm   Syntax  streamingml:kMeansIncremental( INT  no.of.clusters,  DOUBLE  decay.rate,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user doesnt give the decay rate so the default value will be used", 
            "title": "kMeansIncremental (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.20/#kmeansminibatch-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.).   Syntax  streamingml:kMeansMiniBatch( INT  no.of.clusters,  DOUBLE  decay.rate,  INT  maximum.iterations,  INT  no.of.events.to.retrain,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         maximum.iterations \n         Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change \n         50 \n         INT \n         Yes \n         No \n     \n     \n         no.of.events.to.retrain \n         number of events to recalculate cluster centers.  \n         20 \n         INT \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user has not specified hyper params. So default values will be used.", 
            "title": "kMeansMiniBatch (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.20/#perceptronclassifier-stream-processor", 
            "text": "This extension predicts using a linear binary classification Perceptron model.  Syntax  streamingml:perceptronClassifier( STRING  model.name,  DOUBLE  model.bias,  DOUBLE  model.threshold,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used. \n         \n         STRING \n         No \n         No \n     \n     \n         model.bias \n         The bias of the Perceptron algorithm. \n         0.0 \n         DOUBLE \n         No \n         No \n     \n     \n         model.threshold \n         The threshold that separates the two classes. The value specified must be between zero and one. \n          The output is a probability. \n         DOUBLE \n         No \n         No \n     \n     \n         model.features \n         The features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted value ( true/false ) \n         BOOL \n     \n     \n         confidenceLevel \n         The probability of the prediction \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias and a  0.5  threshold learning rate to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted label ( true/false ) is emitted to the  OutputStream  streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The prediction( true/false ) is emitted to the  OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 3  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a default 0.0 bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 , and  attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).", 
            "title": "perceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.20/#updateperceptronclassifier-stream-processor", 
            "text": "This extension builds/updates a linear binary classification Perceptron model.  Syntax  streamingml:updatePerceptronClassifier( STRING  model.name,  BOOL|STRING  model.label,  DOUBLE  learning.rate,  DOUBLE|INT  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built/updated. \n         \n         STRING \n         No \n         No \n     \n     \n         model.label \n         The attribute of the label or the class of the dataset. \n         \n         BOOL STRING \n         No \n         No \n     \n     \n         learning.rate \n         The learning rate of the Perceptron algorithm. \n         0.1 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         featureWeight \n         Weight of the  feature.name  of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a default  0.1  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "updatePerceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.19/", 
            "text": "API Docs - v1.0.19\n\n\nStreamingml\n\n\nkMeansIncremental \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm \n\n\n\nSyntax\n\n\nstreamingml:kMeansIncremental(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user doesnt give the decay rate so the default value will be used\n\n\n\nkMeansMiniBatch \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). \n\n\n\nSyntax\n\n\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nINT\n maximum.iterations, \nINT\n no.of.events.to.retrain, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmaximum.iterations\n\n        \nNumber of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change\n\n        \n50\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nno.of.events.to.retrain\n\n        \nnumber of events to recalculate cluster centers. \n\n        \n20\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user has not specified hyper params. So default values will be used.\n\n\n\nperceptronClassifier \n(Stream Processor)\n\n\nThis extension predicts using a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:perceptronClassifier(\nSTRING\n model.name, \nDOUBLE\n model.bias, \nDOUBLE\n model.threshold, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.bias\n\n        \nThe bias of the Perceptron algorithm.\n\n        \n0.0\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.threshold\n\n        \nThe threshold that separates the two classes. The value specified must be between zero and one.\n\n        \n The output is a probability.\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThe features of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted value (\ntrue/false\n)\n\n        \nBOOL\n\n    \n\n    \n\n        \nconfidenceLevel\n\n        \nThe probability of the prediction\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias and a \n0.5\n threshold learning rate to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted label (\ntrue/false\n) is emitted to the \nOutputStream\n streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The prediction(\ntrue/false\n) is emitted to the \nOutputStream\nstream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 3\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a default 0.0 bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, and \nattribute_2\n. The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nupdatePerceptronClassifier \n(Stream Processor)\n\n\nThis extension builds/updates a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:updatePerceptronClassifier(\nSTRING\n model.name, \nBOOL|STRING\n model.label, \nDOUBLE\n learning.rate, \nDOUBLE|INT\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built/updated.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.label\n\n        \nThe attribute of the label or the class of the dataset.\n\n        \n\n        \nBOOL\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the Perceptron algorithm.\n\n        \n0.1\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nfeatureWeight\n\n        \nWeight of the \nfeature.name\n of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a default \n0.1\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "1.0.19"
        }, 
        {
            "location": "/api/1.0.19/#api-docs-v1019", 
            "text": "", 
            "title": "API Docs - v1.0.19"
        }, 
        {
            "location": "/api/1.0.19/#streamingml", 
            "text": "", 
            "title": "Streamingml"
        }, 
        {
            "location": "/api/1.0.19/#kmeansincremental-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm   Syntax  streamingml:kMeansIncremental( INT  no.of.clusters,  DOUBLE  decay.rate,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user doesnt give the decay rate so the default value will be used", 
            "title": "kMeansIncremental (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.19/#kmeansminibatch-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.).   Syntax  streamingml:kMeansMiniBatch( INT  no.of.clusters,  DOUBLE  decay.rate,  INT  maximum.iterations,  INT  no.of.events.to.retrain,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         maximum.iterations \n         Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change \n         50 \n         INT \n         Yes \n         No \n     \n     \n         no.of.events.to.retrain \n         number of events to recalculate cluster centers.  \n         20 \n         INT \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user has not specified hyper params. So default values will be used.", 
            "title": "kMeansMiniBatch (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.19/#perceptronclassifier-stream-processor", 
            "text": "This extension predicts using a linear binary classification Perceptron model.  Syntax  streamingml:perceptronClassifier( STRING  model.name,  DOUBLE  model.bias,  DOUBLE  model.threshold,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used. \n         \n         STRING \n         No \n         No \n     \n     \n         model.bias \n         The bias of the Perceptron algorithm. \n         0.0 \n         DOUBLE \n         No \n         No \n     \n     \n         model.threshold \n         The threshold that separates the two classes. The value specified must be between zero and one. \n          The output is a probability. \n         DOUBLE \n         No \n         No \n     \n     \n         model.features \n         The features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted value ( true/false ) \n         BOOL \n     \n     \n         confidenceLevel \n         The probability of the prediction \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias and a  0.5  threshold learning rate to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted label ( true/false ) is emitted to the  OutputStream  streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The prediction( true/false ) is emitted to the  OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 3  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a default 0.0 bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 , and  attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).", 
            "title": "perceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.19/#updateperceptronclassifier-stream-processor", 
            "text": "This extension builds/updates a linear binary classification Perceptron model.  Syntax  streamingml:updatePerceptronClassifier( STRING  model.name,  BOOL|STRING  model.label,  DOUBLE  learning.rate,  DOUBLE|INT  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built/updated. \n         \n         STRING \n         No \n         No \n     \n     \n         model.label \n         The attribute of the label or the class of the dataset. \n         \n         BOOL STRING \n         No \n         No \n     \n     \n         learning.rate \n         The learning rate of the Perceptron algorithm. \n         0.1 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         featureWeight \n         Weight of the  feature.name  of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a default  0.1  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "updatePerceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.18/", 
            "text": "API Docs - v1.0.18\n\n\nStreamingml\n\n\nkMeansIncremental \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm \n\n\n\nSyntax\n\n\nstreamingml:kMeansIncremental(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user doesnt give the decay rate so the default value will be used\n\n\n\nkMeansMiniBatch \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). \n\n\n\nSyntax\n\n\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nINT\n maximum.iterations, \nINT\n no.of.events.to.retrain, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmaximum.iterations\n\n        \nNumber of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change\n\n        \n50\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nno.of.events.to.retrain\n\n        \nnumber of events to recalculate cluster centers. \n\n        \n20\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user has not specified hyper params. So default values will be used.\n\n\n\nperceptronClassifier \n(Stream Processor)\n\n\nThis extension predicts using a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:perceptronClassifier(\nSTRING\n model.name, \nDOUBLE\n model.bias, \nDOUBLE\n model.threshold, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.bias\n\n        \nThe bias of the Perceptron algorithm.\n\n        \n0.0\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.threshold\n\n        \nThe threshold that separates the two classes. The value specified must be between zero and one.\n\n        \n The output is a probability.\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThe features of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted value (\ntrue/false\n)\n\n        \nBOOL\n\n    \n\n    \n\n        \nconfidenceLevel\n\n        \nThe probability of the prediction\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias and a \n0.5\n threshold learning rate to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted label (\ntrue/false\n) is emitted to the \nOutputStream\n streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The prediction(\ntrue/false\n) is emitted to the \nOutputStream\nstream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 3\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a default 0.0 bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, and \nattribute_2\n. The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nupdatePerceptronClassifier \n(Stream Processor)\n\n\nThis extension builds/updates a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:updatePerceptronClassifier(\nSTRING\n model.name, \nBOOL|STRING\n model.label, \nDOUBLE\n learning.rate, \nDOUBLE|INT\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built/updated.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.label\n\n        \nThe attribute of the label or the class of the dataset.\n\n        \n\n        \nBOOL\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the Perceptron algorithm.\n\n        \n0.1\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nfeatureWeight\n\n        \nWeight of the \nfeature.name\n of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a default \n0.1\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "1.0.18"
        }, 
        {
            "location": "/api/1.0.18/#api-docs-v1018", 
            "text": "", 
            "title": "API Docs - v1.0.18"
        }, 
        {
            "location": "/api/1.0.18/#streamingml", 
            "text": "", 
            "title": "Streamingml"
        }, 
        {
            "location": "/api/1.0.18/#kmeansincremental-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm   Syntax  streamingml:kMeansIncremental( INT  no.of.clusters,  DOUBLE  decay.rate,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user doesnt give the decay rate so the default value will be used", 
            "title": "kMeansIncremental (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.18/#kmeansminibatch-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.).   Syntax  streamingml:kMeansMiniBatch( INT  no.of.clusters,  DOUBLE  decay.rate,  INT  maximum.iterations,  INT  no.of.events.to.retrain,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         maximum.iterations \n         Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change \n         50 \n         INT \n         Yes \n         No \n     \n     \n         no.of.events.to.retrain \n         number of events to recalculate cluster centers.  \n         20 \n         INT \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user has not specified hyper params. So default values will be used.", 
            "title": "kMeansMiniBatch (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.18/#perceptronclassifier-stream-processor", 
            "text": "This extension predicts using a linear binary classification Perceptron model.  Syntax  streamingml:perceptronClassifier( STRING  model.name,  DOUBLE  model.bias,  DOUBLE  model.threshold,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used. \n         \n         STRING \n         No \n         No \n     \n     \n         model.bias \n         The bias of the Perceptron algorithm. \n         0.0 \n         DOUBLE \n         No \n         No \n     \n     \n         model.threshold \n         The threshold that separates the two classes. The value specified must be between zero and one. \n          The output is a probability. \n         DOUBLE \n         No \n         No \n     \n     \n         model.features \n         The features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted value ( true/false ) \n         BOOL \n     \n     \n         confidenceLevel \n         The probability of the prediction \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias and a  0.5  threshold learning rate to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted label ( true/false ) is emitted to the  OutputStream  streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The prediction( true/false ) is emitted to the  OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 3  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a default 0.0 bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 , and  attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).", 
            "title": "perceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.18/#updateperceptronclassifier-stream-processor", 
            "text": "This extension builds/updates a linear binary classification Perceptron model.  Syntax  streamingml:updatePerceptronClassifier( STRING  model.name,  BOOL|STRING  model.label,  DOUBLE  learning.rate,  DOUBLE|INT  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built/updated. \n         \n         STRING \n         No \n         No \n     \n     \n         model.label \n         The attribute of the label or the class of the dataset. \n         \n         BOOL STRING \n         No \n         No \n     \n     \n         learning.rate \n         The learning rate of the Perceptron algorithm. \n         0.1 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         featureWeight \n         Weight of the  feature.name  of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a default  0.1  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "updatePerceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.17/", 
            "text": "API Docs - v1.0.17\n\n\nStreamingml\n\n\nkMeansIncremental \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm \n\n\n\nSyntax\n\n\nstreamingml:kMeansIncremental(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user doesnt give the decay rate so the default value will be used\n\n\n\nkMeansMiniBatch \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). \n\n\n\nSyntax\n\n\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nINT\n maximum.iterations, \nINT\n no.of.events.to.retrain, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmaximum.iterations\n\n        \nNumber of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change\n\n        \n50\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nno.of.events.to.retrain\n\n        \nnumber of events to recalculate cluster centers. \n\n        \n20\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user has not specified hyper params. So default values will be used.\n\n\n\nperceptronClassifier \n(Stream Processor)\n\n\nThis extension predicts using a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:perceptronClassifier(\nSTRING\n model.name, \nDOUBLE\n model.bias, \nDOUBLE\n model.threshold, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.bias\n\n        \nThe bias of the Perceptron algorithm.\n\n        \n0.0\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.threshold\n\n        \nThe threshold that separates the two classes. The value specified must be between zero and one.\n\n        \n The output is a probability.\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThe features of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted value (\ntrue/false\n)\n\n        \nBOOL\n\n    \n\n    \n\n        \nconfidenceLevel\n\n        \nThe probability of the prediction\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias and a \n0.5\n threshold learning rate to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted label (\ntrue/false\n) is emitted to the \nOutputStream\n streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The prediction(\ntrue/false\n) is emitted to the \nOutputStream\nstream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 3\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a default 0.0 bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, and \nattribute_2\n. The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nupdatePerceptronClassifier \n(Stream Processor)\n\n\nThis extension builds/updates a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:updatePerceptronClassifier(\nSTRING\n model.name, \nBOOL|STRING\n model.label, \nDOUBLE\n learning.rate, \nDOUBLE|INT\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built/updated.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.label\n\n        \nThe attribute of the label or the class of the dataset.\n\n        \n\n        \nBOOL\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the Perceptron algorithm.\n\n        \n0.1\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nfeatureWeight\n\n        \nWeight of the \nfeature.name\n of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a default \n0.1\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "1.0.17"
        }, 
        {
            "location": "/api/1.0.17/#api-docs-v1017", 
            "text": "", 
            "title": "API Docs - v1.0.17"
        }, 
        {
            "location": "/api/1.0.17/#streamingml", 
            "text": "", 
            "title": "Streamingml"
        }, 
        {
            "location": "/api/1.0.17/#kmeansincremental-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm   Syntax  streamingml:kMeansIncremental( INT  no.of.clusters,  DOUBLE  decay.rate,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user doesnt give the decay rate so the default value will be used", 
            "title": "kMeansIncremental (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.17/#kmeansminibatch-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.).   Syntax  streamingml:kMeansMiniBatch( INT  no.of.clusters,  DOUBLE  decay.rate,  INT  maximum.iterations,  INT  no.of.events.to.retrain,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         maximum.iterations \n         Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change \n         50 \n         INT \n         Yes \n         No \n     \n     \n         no.of.events.to.retrain \n         number of events to recalculate cluster centers.  \n         20 \n         INT \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user has not specified hyper params. So default values will be used.", 
            "title": "kMeansMiniBatch (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.17/#perceptronclassifier-stream-processor", 
            "text": "This extension predicts using a linear binary classification Perceptron model.  Syntax  streamingml:perceptronClassifier( STRING  model.name,  DOUBLE  model.bias,  DOUBLE  model.threshold,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used. \n         \n         STRING \n         No \n         No \n     \n     \n         model.bias \n         The bias of the Perceptron algorithm. \n         0.0 \n         DOUBLE \n         No \n         No \n     \n     \n         model.threshold \n         The threshold that separates the two classes. The value specified must be between zero and one. \n          The output is a probability. \n         DOUBLE \n         No \n         No \n     \n     \n         model.features \n         The features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted value ( true/false ) \n         BOOL \n     \n     \n         confidenceLevel \n         The probability of the prediction \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias and a  0.5  threshold learning rate to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted label ( true/false ) is emitted to the  OutputStream  streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The prediction( true/false ) is emitted to the  OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 3  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a default 0.0 bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 , and  attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).", 
            "title": "perceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.17/#updateperceptronclassifier-stream-processor", 
            "text": "This extension builds/updates a linear binary classification Perceptron model.  Syntax  streamingml:updatePerceptronClassifier( STRING  model.name,  BOOL|STRING  model.label,  DOUBLE  learning.rate,  DOUBLE|INT  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built/updated. \n         \n         STRING \n         No \n         No \n     \n     \n         model.label \n         The attribute of the label or the class of the dataset. \n         \n         BOOL STRING \n         No \n         No \n     \n     \n         learning.rate \n         The learning rate of the Perceptron algorithm. \n         0.1 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         featureWeight \n         Weight of the  feature.name  of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a default  0.1  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "updatePerceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.16/", 
            "text": "API Docs - v1.0.16\n\n\nStreamingml\n\n\nkMeansIncremental \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm \n\n\n\nSyntax\n\n\nstreamingml:kMeansIncremental(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user doesnt give the decay rate so the default value will be used\n\n\n\nkMeansMiniBatch \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). \n\n\n\nSyntax\n\n\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nINT\n maximum.iterations, \nINT\n no.of.events.to.retrain, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmaximum.iterations\n\n        \nNumber of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change\n\n        \n50\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nno.of.events.to.retrain\n\n        \nnumber of events to recalculate cluster centers. \n\n        \n20\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user has not specified hyper params. So default values will be used.\n\n\n\nperceptronClassifier \n(Stream Processor)\n\n\nThis extension predicts using a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:perceptronClassifier(\nSTRING\n model.name, \nDOUBLE\n model.bias, \nDOUBLE\n model.threshold, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.bias\n\n        \nThe bias of the Perceptron algorithm.\n\n        \n0.0\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.threshold\n\n        \nThe threshold that separates the two classes. The value specified must be between zero and one.\n\n        \n The output is a probability.\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThe features of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted value (\ntrue/false\n)\n\n        \nBOOL\n\n    \n\n    \n\n        \nconfidenceLevel\n\n        \nThe probability of the prediction\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias and a \n0.5\n threshold learning rate to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted label (\ntrue/false\n) is emitted to the \nOutputStream\n streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The prediction(\ntrue/false\n) is emitted to the \nOutputStream\nstream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 3\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a default 0.0 bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, and \nattribute_2\n. The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nupdatePerceptronClassifier \n(Stream Processor)\n\n\nThis extension builds/updates a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:updatePerceptronClassifier(\nSTRING\n model.name, \nBOOL|STRING\n model.label, \nDOUBLE\n learning.rate, \nDOUBLE|INT\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built/updated.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.label\n\n        \nThe attribute of the label or the class of the dataset.\n\n        \n\n        \nBOOL\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the Perceptron algorithm.\n\n        \n0.1\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nfeatureWeight\n\n        \nWeight of the \nfeature.name\n of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a default \n0.1\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "1.0.16"
        }, 
        {
            "location": "/api/1.0.16/#api-docs-v1016", 
            "text": "", 
            "title": "API Docs - v1.0.16"
        }, 
        {
            "location": "/api/1.0.16/#streamingml", 
            "text": "", 
            "title": "Streamingml"
        }, 
        {
            "location": "/api/1.0.16/#kmeansincremental-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm   Syntax  streamingml:kMeansIncremental( INT  no.of.clusters,  DOUBLE  decay.rate,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user doesnt give the decay rate so the default value will be used", 
            "title": "kMeansIncremental (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.16/#kmeansminibatch-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.).   Syntax  streamingml:kMeansMiniBatch( INT  no.of.clusters,  DOUBLE  decay.rate,  INT  maximum.iterations,  INT  no.of.events.to.retrain,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         maximum.iterations \n         Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change \n         50 \n         INT \n         Yes \n         No \n     \n     \n         no.of.events.to.retrain \n         number of events to recalculate cluster centers.  \n         20 \n         INT \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user has not specified hyper params. So default values will be used.", 
            "title": "kMeansMiniBatch (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.16/#perceptronclassifier-stream-processor", 
            "text": "This extension predicts using a linear binary classification Perceptron model.  Syntax  streamingml:perceptronClassifier( STRING  model.name,  DOUBLE  model.bias,  DOUBLE  model.threshold,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used. \n         \n         STRING \n         No \n         No \n     \n     \n         model.bias \n         The bias of the Perceptron algorithm. \n         0.0 \n         DOUBLE \n         No \n         No \n     \n     \n         model.threshold \n         The threshold that separates the two classes. The value specified must be between zero and one. \n          The output is a probability. \n         DOUBLE \n         No \n         No \n     \n     \n         model.features \n         The features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted value ( true/false ) \n         BOOL \n     \n     \n         confidenceLevel \n         The probability of the prediction \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias and a  0.5  threshold learning rate to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted label ( true/false ) is emitted to the  OutputStream  streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The prediction( true/false ) is emitted to the  OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 3  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a default 0.0 bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 , and  attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).", 
            "title": "perceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.16/#updateperceptronclassifier-stream-processor", 
            "text": "This extension builds/updates a linear binary classification Perceptron model.  Syntax  streamingml:updatePerceptronClassifier( STRING  model.name,  BOOL|STRING  model.label,  DOUBLE  learning.rate,  DOUBLE|INT  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built/updated. \n         \n         STRING \n         No \n         No \n     \n     \n         model.label \n         The attribute of the label or the class of the dataset. \n         \n         BOOL STRING \n         No \n         No \n     \n     \n         learning.rate \n         The learning rate of the Perceptron algorithm. \n         0.1 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         featureWeight \n         Weight of the  feature.name  of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a default  0.1  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "updatePerceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.15/", 
            "text": "API Docs - v1.0.15\n\n\nStreamingml\n\n\nkMeansIncremental \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm \n\n\n\nSyntax\n\n\nstreamingml:kMeansIncremental(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user doesnt give the decay rate so the default value will be used\n\n\n\nkMeansMiniBatch \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). \n\n\n\nSyntax\n\n\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nINT\n maximum.iterations, \nINT\n no.of.events.to.retrain, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmaximum.iterations\n\n        \nNumber of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change\n\n        \n50\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nno.of.events.to.retrain\n\n        \nnumber of events to recalculate cluster centers. \n\n        \n20\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user has not specified hyper params. So default values will be used.\n\n\n\nperceptronClassifier \n(Stream Processor)\n\n\nThis extension predicts using a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:perceptronClassifier(\nSTRING\n model.name, \nDOUBLE\n model.bias, \nDOUBLE\n model.threshold, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.bias\n\n        \nThe bias of the Perceptron algorithm.\n\n        \n0.0\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.threshold\n\n        \nThe threshold that separates the two classes. The value specified must be between zero and one.\n\n        \n The output is a probability.\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThe features of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted value (\ntrue/false\n)\n\n        \nBOOL\n\n    \n\n    \n\n        \nconfidenceLevel\n\n        \nThe probability of the prediction\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias and a \n0.5\n threshold learning rate to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted label (\ntrue/false\n) is emitted to the \nOutputStream\n streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The prediction(\ntrue/false\n) is emitted to the \nOutputStream\nstream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 3\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a default 0.0 bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, and \nattribute_2\n. The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nupdatePerceptronClassifier \n(Stream Processor)\n\n\nThis extension builds/updates a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:updatePerceptronClassifier(\nSTRING\n model.name, \nBOOL|STRING\n model.label, \nDOUBLE\n learning.rate, \nDOUBLE|INT\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built/updated.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.label\n\n        \nThe attribute of the label or the class of the dataset.\n\n        \n\n        \nBOOL\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the Perceptron algorithm.\n\n        \n0.1\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nfeatureWeight\n\n        \nWeight of the \nfeature.name\n of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a default \n0.1\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "1.0.15"
        }, 
        {
            "location": "/api/1.0.15/#api-docs-v1015", 
            "text": "", 
            "title": "API Docs - v1.0.15"
        }, 
        {
            "location": "/api/1.0.15/#streamingml", 
            "text": "", 
            "title": "Streamingml"
        }, 
        {
            "location": "/api/1.0.15/#kmeansincremental-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm   Syntax  streamingml:kMeansIncremental( INT  no.of.clusters,  DOUBLE  decay.rate,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user doesnt give the decay rate so the default value will be used", 
            "title": "kMeansIncremental (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.15/#kmeansminibatch-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.).   Syntax  streamingml:kMeansMiniBatch( INT  no.of.clusters,  DOUBLE  decay.rate,  INT  maximum.iterations,  INT  no.of.events.to.retrain,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         maximum.iterations \n         Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change \n         50 \n         INT \n         Yes \n         No \n     \n     \n         no.of.events.to.retrain \n         number of events to recalculate cluster centers.  \n         20 \n         INT \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user has not specified hyper params. So default values will be used.", 
            "title": "kMeansMiniBatch (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.15/#perceptronclassifier-stream-processor", 
            "text": "This extension predicts using a linear binary classification Perceptron model.  Syntax  streamingml:perceptronClassifier( STRING  model.name,  DOUBLE  model.bias,  DOUBLE  model.threshold,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used. \n         \n         STRING \n         No \n         No \n     \n     \n         model.bias \n         The bias of the Perceptron algorithm. \n         0.0 \n         DOUBLE \n         No \n         No \n     \n     \n         model.threshold \n         The threshold that separates the two classes. The value specified must be between zero and one. \n          The output is a probability. \n         DOUBLE \n         No \n         No \n     \n     \n         model.features \n         The features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted value ( true/false ) \n         BOOL \n     \n     \n         confidenceLevel \n         The probability of the prediction \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias and a  0.5  threshold learning rate to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted label ( true/false ) is emitted to the  OutputStream  streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The prediction( true/false ) is emitted to the  OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 3  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a default 0.0 bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 , and  attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).", 
            "title": "perceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.15/#updateperceptronclassifier-stream-processor", 
            "text": "This extension builds/updates a linear binary classification Perceptron model.  Syntax  streamingml:updatePerceptronClassifier( STRING  model.name,  BOOL|STRING  model.label,  DOUBLE  learning.rate,  DOUBLE|INT  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built/updated. \n         \n         STRING \n         No \n         No \n     \n     \n         model.label \n         The attribute of the label or the class of the dataset. \n         \n         BOOL STRING \n         No \n         No \n     \n     \n         learning.rate \n         The learning rate of the Perceptron algorithm. \n         0.1 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         featureWeight \n         Weight of the  feature.name  of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a default  0.1  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "updatePerceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.14/", 
            "text": "API Docs - v1.0.14\n\n\nStreamingml\n\n\nkMeansIncremental \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm \n\n\n\nSyntax\n\n\nstreamingml:kMeansIncremental(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user doesnt give the decay rate so the default value will be used\n\n\n\nkMeansMiniBatch \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). \n\n\n\nSyntax\n\n\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nINT\n maximum.iterations, \nINT\n no.of.events.to.retrain, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmaximum.iterations\n\n        \nNumber of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change\n\n        \n50\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nno.of.events.to.retrain\n\n        \nnumber of events to recalculate cluster centers. \n\n        \n20\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user has not specified hyper params. So default values will be used.\n\n\n\nperceptronClassifier \n(Stream Processor)\n\n\nThis extension predicts using a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:perceptronClassifier(\nSTRING\n model.name, \nDOUBLE\n model.bias, \nDOUBLE\n model.threshold, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.bias\n\n        \nThe bias of the Perceptron algorithm.\n\n        \n0.0\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.threshold\n\n        \nThe threshold that separates the two classes. The value specified must be between zero and one.\n\n        \n The output is a probability.\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThe features of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted value (\ntrue/false\n)\n\n        \nBOOL\n\n    \n\n    \n\n        \nconfidenceLevel\n\n        \nThe probability of the prediction\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias and a \n0.5\n threshold learning rate to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted label (\ntrue/false\n) is emitted to the \nOutputStream\n streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The prediction(\ntrue/false\n) is emitted to the \nOutputStream\nstream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 3\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a default 0.0 bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, and \nattribute_2\n. The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nupdatePerceptronClassifier \n(Stream Processor)\n\n\nThis extension builds/updates a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:updatePerceptronClassifier(\nSTRING\n model.name, \nBOOL|STRING\n model.label, \nDOUBLE\n learning.rate, \nDOUBLE|INT\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built/updated.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.label\n\n        \nThe attribute of the label or the class of the dataset.\n\n        \n\n        \nBOOL\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the Perceptron algorithm.\n\n        \n0.1\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nfeatureWeight\n\n        \nWeight of the \nfeature.name\n of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a default \n0.1\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "1.0.14"
        }, 
        {
            "location": "/api/1.0.14/#api-docs-v1014", 
            "text": "", 
            "title": "API Docs - v1.0.14"
        }, 
        {
            "location": "/api/1.0.14/#streamingml", 
            "text": "", 
            "title": "Streamingml"
        }, 
        {
            "location": "/api/1.0.14/#kmeansincremental-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm   Syntax  streamingml:kMeansIncremental( INT  no.of.clusters,  DOUBLE  decay.rate,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user doesnt give the decay rate so the default value will be used", 
            "title": "kMeansIncremental (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.14/#kmeansminibatch-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.).   Syntax  streamingml:kMeansMiniBatch( INT  no.of.clusters,  DOUBLE  decay.rate,  INT  maximum.iterations,  INT  no.of.events.to.retrain,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         maximum.iterations \n         Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change \n         50 \n         INT \n         Yes \n         No \n     \n     \n         no.of.events.to.retrain \n         number of events to recalculate cluster centers.  \n         20 \n         INT \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user has not specified hyper params. So default values will be used.", 
            "title": "kMeansMiniBatch (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.14/#perceptronclassifier-stream-processor", 
            "text": "This extension predicts using a linear binary classification Perceptron model.  Syntax  streamingml:perceptronClassifier( STRING  model.name,  DOUBLE  model.bias,  DOUBLE  model.threshold,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used. \n         \n         STRING \n         No \n         No \n     \n     \n         model.bias \n         The bias of the Perceptron algorithm. \n         0.0 \n         DOUBLE \n         No \n         No \n     \n     \n         model.threshold \n         The threshold that separates the two classes. The value specified must be between zero and one. \n          The output is a probability. \n         DOUBLE \n         No \n         No \n     \n     \n         model.features \n         The features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted value ( true/false ) \n         BOOL \n     \n     \n         confidenceLevel \n         The probability of the prediction \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias and a  0.5  threshold learning rate to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted label ( true/false ) is emitted to the  OutputStream  streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The prediction( true/false ) is emitted to the  OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 3  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a default 0.0 bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 , and  attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).", 
            "title": "perceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.14/#updateperceptronclassifier-stream-processor", 
            "text": "This extension builds/updates a linear binary classification Perceptron model.  Syntax  streamingml:updatePerceptronClassifier( STRING  model.name,  BOOL|STRING  model.label,  DOUBLE  learning.rate,  DOUBLE|INT  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built/updated. \n         \n         STRING \n         No \n         No \n     \n     \n         model.label \n         The attribute of the label or the class of the dataset. \n         \n         BOOL STRING \n         No \n         No \n     \n     \n         learning.rate \n         The learning rate of the Perceptron algorithm. \n         0.1 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         featureWeight \n         Weight of the  feature.name  of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a default  0.1  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "updatePerceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.13/", 
            "text": "API Docs - v1.0.13\n\n\nStreamingml\n\n\nkMeansIncremental \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm \n\n\n\nSyntax\n\n\nstreamingml:kMeansIncremental(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user doesnt give the decay rate so the default value will be used\n\n\n\nkMeansMiniBatch \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). \n\n\n\nSyntax\n\n\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nINT\n maximum.iterations, \nINT\n no.of.events.to.retrain, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmaximum.iterations\n\n        \nNumber of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change\n\n        \n50\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nno.of.events.to.retrain\n\n        \nnumber of events to recalculate cluster centers. \n\n        \n20\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user has not specified hyper params. So default values will be used.\n\n\n\nperceptronClassifier \n(Stream Processor)\n\n\nThis extension predicts using a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:perceptronClassifier(\nSTRING\n model.name, \nDOUBLE\n model.bias, \nDOUBLE\n model.threshold, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.bias\n\n        \nThe bias of the Perceptron algorithm.\n\n        \n0.0\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.threshold\n\n        \nThe threshold that separates the two classes. The value specified must be between zero and one.\n\n        \n The output is a probability.\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThe features of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted value (\ntrue/false\n)\n\n        \nBOOL\n\n    \n\n    \n\n        \nconfidenceLevel\n\n        \nThe probability of the prediction\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias and a \n0.5\n threshold learning rate to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted label (\ntrue/false\n) is emitted to the \nOutputStream\n streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The prediction(\ntrue/false\n) is emitted to the \nOutputStream\nstream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 3\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a default 0.0 bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, and \nattribute_2\n. The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nupdatePerceptronClassifier \n(Stream Processor)\n\n\nThis extension builds/updates a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:updatePerceptronClassifier(\nSTRING\n model.name, \nBOOL|STRING\n model.label, \nDOUBLE\n learning.rate, \nDOUBLE|INT\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built/updated.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.label\n\n        \nThe attribute of the label or the class of the dataset.\n\n        \n\n        \nBOOL\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the Perceptron algorithm.\n\n        \n0.1\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nfeatureWeight\n\n        \nWeight of the \nfeature.name\n of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a default \n0.1\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "1.0.13"
        }, 
        {
            "location": "/api/1.0.13/#api-docs-v1013", 
            "text": "", 
            "title": "API Docs - v1.0.13"
        }, 
        {
            "location": "/api/1.0.13/#streamingml", 
            "text": "", 
            "title": "Streamingml"
        }, 
        {
            "location": "/api/1.0.13/#kmeansincremental-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm   Syntax  streamingml:kMeansIncremental( INT  no.of.clusters,  DOUBLE  decay.rate,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user doesnt give the decay rate so the default value will be used", 
            "title": "kMeansIncremental (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.13/#kmeansminibatch-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.).   Syntax  streamingml:kMeansMiniBatch( INT  no.of.clusters,  DOUBLE  decay.rate,  INT  maximum.iterations,  INT  no.of.events.to.retrain,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         maximum.iterations \n         Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change \n         50 \n         INT \n         Yes \n         No \n     \n     \n         no.of.events.to.retrain \n         number of events to recalculate cluster centers.  \n         20 \n         INT \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user has not specified hyper params. So default values will be used.", 
            "title": "kMeansMiniBatch (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.13/#perceptronclassifier-stream-processor", 
            "text": "This extension predicts using a linear binary classification Perceptron model.  Syntax  streamingml:perceptronClassifier( STRING  model.name,  DOUBLE  model.bias,  DOUBLE  model.threshold,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used. \n         \n         STRING \n         No \n         No \n     \n     \n         model.bias \n         The bias of the Perceptron algorithm. \n         0.0 \n         DOUBLE \n         No \n         No \n     \n     \n         model.threshold \n         The threshold that separates the two classes. The value specified must be between zero and one. \n          The output is a probability. \n         DOUBLE \n         No \n         No \n     \n     \n         model.features \n         The features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted value ( true/false ) \n         BOOL \n     \n     \n         confidenceLevel \n         The probability of the prediction \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias and a  0.5  threshold learning rate to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted label ( true/false ) is emitted to the  OutputStream  streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The prediction( true/false ) is emitted to the  OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 3  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a default 0.0 bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 , and  attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).", 
            "title": "perceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.13/#updateperceptronclassifier-stream-processor", 
            "text": "This extension builds/updates a linear binary classification Perceptron model.  Syntax  streamingml:updatePerceptronClassifier( STRING  model.name,  BOOL|STRING  model.label,  DOUBLE  learning.rate,  DOUBLE|INT  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built/updated. \n         \n         STRING \n         No \n         No \n     \n     \n         model.label \n         The attribute of the label or the class of the dataset. \n         \n         BOOL STRING \n         No \n         No \n     \n     \n         learning.rate \n         The learning rate of the Perceptron algorithm. \n         0.1 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         featureWeight \n         Weight of the  feature.name  of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a default  0.1  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "updatePerceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.12/", 
            "text": "API Docs - v1.0.12\n\n\nStreamingml\n\n\nkMeansIncremental \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm \n\n\n\nSyntax\n\n\nstreamingml:kMeansIncremental(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user doesnt give the decay rate so the default value will be used\n\n\n\nkMeansMiniBatch \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). \n\n\n\nSyntax\n\n\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nINT\n maximum.iterations, \nINT\n no.of.events.to.retrain, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmaximum.iterations\n\n        \nNumber of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change\n\n        \n50\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nno.of.events.to.retrain\n\n        \nnumber of events to recalculate cluster centers. \n\n        \n20\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user has not specified hyper params. So default values will be used.\n\n\n\nperceptronClassifier \n(Stream Processor)\n\n\nThis extension predicts using a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:perceptronClassifier(\nSTRING\n model.name, \nDOUBLE\n model.bias, \nDOUBLE\n model.threshold, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.bias\n\n        \nThe bias of the Perceptron algorithm.\n\n        \n0.0\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.threshold\n\n        \nThe threshold that separates the two classes. The value specified must be between zero and one.\n\n        \n The output is a probability.\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThe features of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted value (\ntrue/false\n)\n\n        \nBOOL\n\n    \n\n    \n\n        \nconfidenceLevel\n\n        \nThe probability of the prediction\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias and a \n0.5\n threshold learning rate to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted label (\ntrue/false\n) is emitted to the \nOutputStream\n streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The prediction(\ntrue/false\n) is emitted to the \nOutputStream\nstream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 3\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a default 0.0 bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, and \nattribute_2\n. The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nupdatePerceptronClassifier \n(Stream Processor)\n\n\nThis extension builds/updates a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:updatePerceptronClassifier(\nSTRING\n model.name, \nBOOL|STRING\n model.label, \nDOUBLE\n learning.rate, \nDOUBLE|INT\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built/updated.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.label\n\n        \nThe attribute of the label or the class of the dataset.\n\n        \n\n        \nBOOL\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the Perceptron algorithm.\n\n        \n0.1\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nfeatureWeight\n\n        \nWeight of the \nfeature.name\n of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a default \n0.1\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "1.0.12"
        }, 
        {
            "location": "/api/1.0.12/#api-docs-v1012", 
            "text": "", 
            "title": "API Docs - v1.0.12"
        }, 
        {
            "location": "/api/1.0.12/#streamingml", 
            "text": "", 
            "title": "Streamingml"
        }, 
        {
            "location": "/api/1.0.12/#kmeansincremental-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm   Syntax  streamingml:kMeansIncremental( INT  no.of.clusters,  DOUBLE  decay.rate,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user doesnt give the decay rate so the default value will be used", 
            "title": "kMeansIncremental (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.12/#kmeansminibatch-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.).   Syntax  streamingml:kMeansMiniBatch( INT  no.of.clusters,  DOUBLE  decay.rate,  INT  maximum.iterations,  INT  no.of.events.to.retrain,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         maximum.iterations \n         Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change \n         50 \n         INT \n         Yes \n         No \n     \n     \n         no.of.events.to.retrain \n         number of events to recalculate cluster centers.  \n         20 \n         INT \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user has not specified hyper params. So default values will be used.", 
            "title": "kMeansMiniBatch (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.12/#perceptronclassifier-stream-processor", 
            "text": "This extension predicts using a linear binary classification Perceptron model.  Syntax  streamingml:perceptronClassifier( STRING  model.name,  DOUBLE  model.bias,  DOUBLE  model.threshold,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used. \n         \n         STRING \n         No \n         No \n     \n     \n         model.bias \n         The bias of the Perceptron algorithm. \n         0.0 \n         DOUBLE \n         No \n         No \n     \n     \n         model.threshold \n         The threshold that separates the two classes. The value specified must be between zero and one. \n          The output is a probability. \n         DOUBLE \n         No \n         No \n     \n     \n         model.features \n         The features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted value ( true/false ) \n         BOOL \n     \n     \n         confidenceLevel \n         The probability of the prediction \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias and a  0.5  threshold learning rate to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted label ( true/false ) is emitted to the  OutputStream  streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The prediction( true/false ) is emitted to the  OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 3  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a default 0.0 bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 , and  attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).", 
            "title": "perceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.12/#updateperceptronclassifier-stream-processor", 
            "text": "This extension builds/updates a linear binary classification Perceptron model.  Syntax  streamingml:updatePerceptronClassifier( STRING  model.name,  BOOL|STRING  model.label,  DOUBLE  learning.rate,  DOUBLE|INT  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built/updated. \n         \n         STRING \n         No \n         No \n     \n     \n         model.label \n         The attribute of the label or the class of the dataset. \n         \n         BOOL STRING \n         No \n         No \n     \n     \n         learning.rate \n         The learning rate of the Perceptron algorithm. \n         0.1 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         featureWeight \n         Weight of the  feature.name  of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a default  0.1  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "updatePerceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.11/", 
            "text": "API Docs - v1.0.11\n\n\nStreamingml\n\n\nkMeansIncremental \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm \n\n\n\nSyntax\n\n\nstreamingml:kMeansIncremental(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user doesnt give the decay rate so the default value will be used\n\n\n\nkMeansMiniBatch \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). \n\n\n\nSyntax\n\n\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nINT\n maximum.iterations, \nINT\n no.of.events.to.retrain, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmaximum.iterations\n\n        \nNumber of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change\n\n        \n50\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nno.of.events.to.retrain\n\n        \nnumber of events to recalculate cluster centers. \n\n        \n20\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user has not specified hyper params. So default values will be used.\n\n\n\nperceptronClassifier \n(Stream Processor)\n\n\nThis extension predicts using a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:perceptronClassifier(\nSTRING\n model.name, \nDOUBLE\n model.bias, \nDOUBLE\n model.threshold, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.bias\n\n        \nThe bias of the Perceptron algorithm.\n\n        \n0.0\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.threshold\n\n        \nThe threshold that separates the two classes. The value specified must be between zero and one.\n\n        \n The output is a probability.\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThe features of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted value (\ntrue/false\n)\n\n        \nBOOL\n\n    \n\n    \n\n        \nconfidenceLevel\n\n        \nThe probability of the prediction\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias and a \n0.5\n threshold learning rate to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted label (\ntrue/false\n) is emitted to the \nOutputStream\n streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The prediction(\ntrue/false\n) is emitted to the \nOutputStream\nstream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 3\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a default 0.0 bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, and \nattribute_2\n. The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nupdatePerceptronClassifier \n(Stream Processor)\n\n\nThis extension builds/updates a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:updatePerceptronClassifier(\nSTRING\n model.name, \nBOOL|STRING\n model.label, \nDOUBLE\n learning.rate, \nDOUBLE|INT\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built/updated.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.label\n\n        \nThe attribute of the label or the class of the dataset.\n\n        \n\n        \nBOOL\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the Perceptron algorithm.\n\n        \n0.1\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nfeatureWeight\n\n        \nWeight of the \nfeature.name\n of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a default \n0.1\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "1.0.11"
        }, 
        {
            "location": "/api/1.0.11/#api-docs-v1011", 
            "text": "", 
            "title": "API Docs - v1.0.11"
        }, 
        {
            "location": "/api/1.0.11/#streamingml", 
            "text": "", 
            "title": "Streamingml"
        }, 
        {
            "location": "/api/1.0.11/#kmeansincremental-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm   Syntax  streamingml:kMeansIncremental( INT  no.of.clusters,  DOUBLE  decay.rate,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user doesnt give the decay rate so the default value will be used", 
            "title": "kMeansIncremental (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.11/#kmeansminibatch-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.).   Syntax  streamingml:kMeansMiniBatch( INT  no.of.clusters,  DOUBLE  decay.rate,  INT  maximum.iterations,  INT  no.of.events.to.retrain,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         maximum.iterations \n         Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change \n         50 \n         INT \n         Yes \n         No \n     \n     \n         no.of.events.to.retrain \n         number of events to recalculate cluster centers.  \n         20 \n         INT \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user has not specified hyper params. So default values will be used.", 
            "title": "kMeansMiniBatch (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.11/#perceptronclassifier-stream-processor", 
            "text": "This extension predicts using a linear binary classification Perceptron model.  Syntax  streamingml:perceptronClassifier( STRING  model.name,  DOUBLE  model.bias,  DOUBLE  model.threshold,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used. \n         \n         STRING \n         No \n         No \n     \n     \n         model.bias \n         The bias of the Perceptron algorithm. \n         0.0 \n         DOUBLE \n         No \n         No \n     \n     \n         model.threshold \n         The threshold that separates the two classes. The value specified must be between zero and one. \n          The output is a probability. \n         DOUBLE \n         No \n         No \n     \n     \n         model.features \n         The features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted value ( true/false ) \n         BOOL \n     \n     \n         confidenceLevel \n         The probability of the prediction \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias and a  0.5  threshold learning rate to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted label ( true/false ) is emitted to the  OutputStream  streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The prediction( true/false ) is emitted to the  OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 3  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a default 0.0 bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 , and  attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).", 
            "title": "perceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.11/#updateperceptronclassifier-stream-processor", 
            "text": "This extension builds/updates a linear binary classification Perceptron model.  Syntax  streamingml:updatePerceptronClassifier( STRING  model.name,  BOOL|STRING  model.label,  DOUBLE  learning.rate,  DOUBLE|INT  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built/updated. \n         \n         STRING \n         No \n         No \n     \n     \n         model.label \n         The attribute of the label or the class of the dataset. \n         \n         BOOL STRING \n         No \n         No \n     \n     \n         learning.rate \n         The learning rate of the Perceptron algorithm. \n         0.1 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         featureWeight \n         Weight of the  feature.name  of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a default  0.1  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "updatePerceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.10/", 
            "text": "API Docs - v1.0.10\n\n\nStreamingml\n\n\nkMeansIncremental \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm \n\n\n\nSyntax\n\n\nstreamingml:kMeansIncremental(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user doesnt give the decay rate so the default value will be used\n\n\n\nkMeansMiniBatch \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). \n\n\n\nSyntax\n\n\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nINT\n maximum.iterations, \nINT\n no.of.events.to.retrain, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmaximum.iterations\n\n        \nNumber of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change\n\n        \n50\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nno.of.events.to.retrain\n\n        \nnumber of events to recalculate cluster centers. \n\n        \n20\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user has not specified hyper params. So default values will be used.\n\n\n\nperceptronClassifier \n(Stream Processor)\n\n\nThis extension predicts using a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:perceptronClassifier(\nSTRING\n model.name, \nDOUBLE\n model.bias, \nDOUBLE\n model.threshold, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.bias\n\n        \nThe bias of the Perceptron algorithm.\n\n        \n0.0\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.threshold\n\n        \nThe threshold that separates the two classes. The value specified must be between zero and one.\n\n        \n The output is a probability.\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThe features of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted value (\ntrue/false\n)\n\n        \nBOOL\n\n    \n\n    \n\n        \nconfidenceLevel\n\n        \nThe probability of the prediction\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias and a \n0.5\n threshold learning rate to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted label (\ntrue/false\n) is emitted to the \nOutputStream\n streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The prediction(\ntrue/false\n) is emitted to the \nOutputStream\nstream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 3\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a default 0.0 bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, and \nattribute_2\n. The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nupdatePerceptronClassifier \n(Stream Processor)\n\n\nThis extension builds/updates a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:updatePerceptronClassifier(\nSTRING\n model.name, \nBOOL|STRING\n model.label, \nDOUBLE\n learning.rate, \nDOUBLE|INT\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built/updated.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.label\n\n        \nThe attribute of the label or the class of the dataset.\n\n        \n\n        \nBOOL\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the Perceptron algorithm.\n\n        \n0.1\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nfeatureWeight\n\n        \nWeight of the \nfeature.name\n of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a default \n0.1\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "1.0.10"
        }, 
        {
            "location": "/api/1.0.10/#api-docs-v1010", 
            "text": "", 
            "title": "API Docs - v1.0.10"
        }, 
        {
            "location": "/api/1.0.10/#streamingml", 
            "text": "", 
            "title": "Streamingml"
        }, 
        {
            "location": "/api/1.0.10/#kmeansincremental-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm   Syntax  streamingml:kMeansIncremental( INT  no.of.clusters,  DOUBLE  decay.rate,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user doesnt give the decay rate so the default value will be used", 
            "title": "kMeansIncremental (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.10/#kmeansminibatch-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.).   Syntax  streamingml:kMeansMiniBatch( INT  no.of.clusters,  DOUBLE  decay.rate,  INT  maximum.iterations,  INT  no.of.events.to.retrain,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         maximum.iterations \n         Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change \n         50 \n         INT \n         Yes \n         No \n     \n     \n         no.of.events.to.retrain \n         number of events to recalculate cluster centers.  \n         20 \n         INT \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user has not specified hyper params. So default values will be used.", 
            "title": "kMeansMiniBatch (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.10/#perceptronclassifier-stream-processor", 
            "text": "This extension predicts using a linear binary classification Perceptron model.  Syntax  streamingml:perceptronClassifier( STRING  model.name,  DOUBLE  model.bias,  DOUBLE  model.threshold,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used. \n         \n         STRING \n         No \n         No \n     \n     \n         model.bias \n         The bias of the Perceptron algorithm. \n         0.0 \n         DOUBLE \n         No \n         No \n     \n     \n         model.threshold \n         The threshold that separates the two classes. The value specified must be between zero and one. \n          The output is a probability. \n         DOUBLE \n         No \n         No \n     \n     \n         model.features \n         The features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted value ( true/false ) \n         BOOL \n     \n     \n         confidenceLevel \n         The probability of the prediction \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias and a  0.5  threshold learning rate to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted label ( true/false ) is emitted to the  OutputStream  streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The prediction( true/false ) is emitted to the  OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 3  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a default 0.0 bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 , and  attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).", 
            "title": "perceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.10/#updateperceptronclassifier-stream-processor", 
            "text": "This extension builds/updates a linear binary classification Perceptron model.  Syntax  streamingml:updatePerceptronClassifier( STRING  model.name,  BOOL|STRING  model.label,  DOUBLE  learning.rate,  DOUBLE|INT  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built/updated. \n         \n         STRING \n         No \n         No \n     \n     \n         model.label \n         The attribute of the label or the class of the dataset. \n         \n         BOOL STRING \n         No \n         No \n     \n     \n         learning.rate \n         The learning rate of the Perceptron algorithm. \n         0.1 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         featureWeight \n         Weight of the  feature.name  of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a default  0.1  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "updatePerceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.9/", 
            "text": "API Docs - v1.0.9\n\n\nStreamingml\n\n\nkMeansIncremental \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm \n\n\n\nSyntax\n\n\nstreamingml:kMeansIncremental(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user doesnt give the decay rate so the default value will be used\n\n\n\nkMeansMiniBatch \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). \n\n\n\nSyntax\n\n\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nINT\n maximum.iterations, \nINT\n no.of.events.to.retrain, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmaximum.iterations\n\n        \nNumber of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change\n\n        \n50\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nno.of.events.to.retrain\n\n        \nnumber of events to recalculate cluster centers. \n\n        \n20\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user has not specified hyper params. So default values will be used.\n\n\n\nperceptronClassifier \n(Stream Processor)\n\n\nThis extension predicts using a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:perceptronClassifier(\nSTRING\n model.name, \nDOUBLE\n model.bias, \nDOUBLE\n model.threshold, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.bias\n\n        \nThe bias of the Perceptron algorithm.\n\n        \n0.0\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.threshold\n\n        \nThe threshold that separates the two classes. The value specified must be between zero and one.\n\n        \n The output is a probability.\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThe features of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted value (\ntrue/false\n)\n\n        \nBOOL\n\n    \n\n    \n\n        \nconfidenceLevel\n\n        \nThe probability of the prediction\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias and a \n0.5\n threshold learning rate to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted label (\ntrue/false\n) is emitted to the \nOutputStream\n streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The prediction(\ntrue/false\n) is emitted to the \nOutputStream\nstream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 3\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a default 0.0 bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, and \nattribute_2\n. The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nupdatePerceptronClassifier \n(Stream Processor)\n\n\nThis extension builds/updates a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:updatePerceptronClassifier(\nSTRING\n model.name, \nBOOL|STRING\n model.label, \nDOUBLE\n learning.rate, \nDOUBLE|INT\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built/updated.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.label\n\n        \nThe attribute of the label or the class of the dataset.\n\n        \n\n        \nBOOL\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the Perceptron algorithm.\n\n        \n0.1\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nfeatureWeight\n\n        \nWeight of the \nfeature.name\n of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a default \n0.1\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "1.0.9"
        }, 
        {
            "location": "/api/1.0.9/#api-docs-v109", 
            "text": "", 
            "title": "API Docs - v1.0.9"
        }, 
        {
            "location": "/api/1.0.9/#streamingml", 
            "text": "", 
            "title": "Streamingml"
        }, 
        {
            "location": "/api/1.0.9/#kmeansincremental-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm   Syntax  streamingml:kMeansIncremental( INT  no.of.clusters,  DOUBLE  decay.rate,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user doesnt give the decay rate so the default value will be used", 
            "title": "kMeansIncremental (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.9/#kmeansminibatch-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.).   Syntax  streamingml:kMeansMiniBatch( INT  no.of.clusters,  DOUBLE  decay.rate,  INT  maximum.iterations,  INT  no.of.events.to.retrain,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         maximum.iterations \n         Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change \n         50 \n         INT \n         Yes \n         No \n     \n     \n         no.of.events.to.retrain \n         number of events to recalculate cluster centers.  \n         20 \n         INT \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user has not specified hyper params. So default values will be used.", 
            "title": "kMeansMiniBatch (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.9/#perceptronclassifier-stream-processor", 
            "text": "This extension predicts using a linear binary classification Perceptron model.  Syntax  streamingml:perceptronClassifier( STRING  model.name,  DOUBLE  model.bias,  DOUBLE  model.threshold,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used. \n         \n         STRING \n         No \n         No \n     \n     \n         model.bias \n         The bias of the Perceptron algorithm. \n         0.0 \n         DOUBLE \n         No \n         No \n     \n     \n         model.threshold \n         The threshold that separates the two classes. The value specified must be between zero and one. \n          The output is a probability. \n         DOUBLE \n         No \n         No \n     \n     \n         model.features \n         The features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted value ( true/false ) \n         BOOL \n     \n     \n         confidenceLevel \n         The probability of the prediction \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias and a  0.5  threshold learning rate to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted label ( true/false ) is emitted to the  OutputStream  streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The prediction( true/false ) is emitted to the  OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 3  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a default 0.0 bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 , and  attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).", 
            "title": "perceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.9/#updateperceptronclassifier-stream-processor", 
            "text": "This extension builds/updates a linear binary classification Perceptron model.  Syntax  streamingml:updatePerceptronClassifier( STRING  model.name,  BOOL|STRING  model.label,  DOUBLE  learning.rate,  DOUBLE|INT  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built/updated. \n         \n         STRING \n         No \n         No \n     \n     \n         model.label \n         The attribute of the label or the class of the dataset. \n         \n         BOOL STRING \n         No \n         No \n     \n     \n         learning.rate \n         The learning rate of the Perceptron algorithm. \n         0.1 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         featureWeight \n         Weight of the  feature.name  of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a default  0.1  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "updatePerceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.8/", 
            "text": "API Docs - v1.0.8\n\n\nStreamingml\n\n\nkMeansIncremental \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm \n\n\n\nSyntax\n\n\nstreamingml:kMeansIncremental(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user doesnt give the decay rate so the default value will be used\n\n\n\nkMeansMiniBatch \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). \n\n\n\nSyntax\n\n\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nINT\n maximum.iterations, \nINT\n no.of.events.to.retrain, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmaximum.iterations\n\n        \nNumber of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change\n\n        \n50\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nno.of.events.to.retrain\n\n        \nnumber of events to recalculate cluster centers. \n\n        \n20\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user has not specified hyper params. So default values will be used.\n\n\n\nperceptronClassifier \n(Stream Processor)\n\n\nThis extension predicts using a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:perceptronClassifier(\nSTRING\n model.name, \nDOUBLE\n model.bias, \nDOUBLE\n model.threshold, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.bias\n\n        \nThe bias of the Perceptron algorithm.\n\n        \n0.0\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.threshold\n\n        \nThe threshold that separates the two classes. The value specified must be between zero and one.\n\n        \n The output is a probability.\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThe features of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted value (\ntrue/false\n)\n\n        \nBOOL\n\n    \n\n    \n\n        \nconfidenceLevel\n\n        \nThe probability of the prediction\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias and a \n0.5\n threshold learning rate to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted label (\ntrue/false\n) is emitted to the \nOutputStream\n streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The prediction(\ntrue/false\n) is emitted to the \nOutputStream\nstream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 3\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a default 0.0 bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, and \nattribute_2\n. The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nupdatePerceptronClassifier \n(Stream Processor)\n\n\nThis extension builds/updates a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:updatePerceptronClassifier(\nSTRING\n model.name, \nBOOL|STRING\n model.label, \nDOUBLE\n learning.rate, \nDOUBLE|INT\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built/updated.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.label\n\n        \nThe attribute of the label or the class of the dataset.\n\n        \n\n        \nBOOL\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the Perceptron algorithm.\n\n        \n0.1\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nfeatureWeight\n\n        \nWeight of the \nfeature.name\n of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a default \n0.1\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "1.0.8"
        }, 
        {
            "location": "/api/1.0.8/#api-docs-v108", 
            "text": "", 
            "title": "API Docs - v1.0.8"
        }, 
        {
            "location": "/api/1.0.8/#streamingml", 
            "text": "", 
            "title": "Streamingml"
        }, 
        {
            "location": "/api/1.0.8/#kmeansincremental-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm   Syntax  streamingml:kMeansIncremental( INT  no.of.clusters,  DOUBLE  decay.rate,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user doesnt give the decay rate so the default value will be used", 
            "title": "kMeansIncremental (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.8/#kmeansminibatch-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.).   Syntax  streamingml:kMeansMiniBatch( INT  no.of.clusters,  DOUBLE  decay.rate,  INT  maximum.iterations,  INT  no.of.events.to.retrain,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         maximum.iterations \n         Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change \n         50 \n         INT \n         Yes \n         No \n     \n     \n         no.of.events.to.retrain \n         number of events to recalculate cluster centers.  \n         20 \n         INT \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user has not specified hyper params. So default values will be used.", 
            "title": "kMeansMiniBatch (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.8/#perceptronclassifier-stream-processor", 
            "text": "This extension predicts using a linear binary classification Perceptron model.  Syntax  streamingml:perceptronClassifier( STRING  model.name,  DOUBLE  model.bias,  DOUBLE  model.threshold,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used. \n         \n         STRING \n         No \n         No \n     \n     \n         model.bias \n         The bias of the Perceptron algorithm. \n         0.0 \n         DOUBLE \n         No \n         No \n     \n     \n         model.threshold \n         The threshold that separates the two classes. The value specified must be between zero and one. \n          The output is a probability. \n         DOUBLE \n         No \n         No \n     \n     \n         model.features \n         The features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted value ( true/false ) \n         BOOL \n     \n     \n         confidenceLevel \n         The probability of the prediction \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias and a  0.5  threshold learning rate to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted label ( true/false ) is emitted to the  OutputStream  streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The prediction( true/false ) is emitted to the  OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 3  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a default 0.0 bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 , and  attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).", 
            "title": "perceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.8/#updateperceptronclassifier-stream-processor", 
            "text": "This extension builds/updates a linear binary classification Perceptron model.  Syntax  streamingml:updatePerceptronClassifier( STRING  model.name,  BOOL|STRING  model.label,  DOUBLE  learning.rate,  DOUBLE|INT  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built/updated. \n         \n         STRING \n         No \n         No \n     \n     \n         model.label \n         The attribute of the label or the class of the dataset. \n         \n         BOOL STRING \n         No \n         No \n     \n     \n         learning.rate \n         The learning rate of the Perceptron algorithm. \n         0.1 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         featureWeight \n         Weight of the  feature.name  of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a default  0.1  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "updatePerceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.7/", 
            "text": "API Docs - v1.0.7\n\n\nStreamingml\n\n\nkMeansMiniBatch \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). \n\n\n\nSyntax\n\n\nstreamingml:kMeansMiniBatch(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nINT\n maximum.iterations, \nINT\n no.of.events.to.retrain, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmaximum.iterations\n\n        \nNumber of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change\n\n        \n50\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nno.of.events.to.retrain\n\n        \nnumber of events to recalculate cluster centers. \n\n        \n20\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user has not specified hyper params. So default values will be used.\n\n\n\nkMeansIncremental \n(Stream Processor)\n\n\nPerforms K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm \n\n\n\nSyntax\n\n\nstreamingml:kMeansIncremental(\nINT\n no.of.clusters, \nDOUBLE\n decay.rate, \nDOUBLE|FLOAT|INT|LONG\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nno.of.clusters\n\n        \nThe assumed number of natural clusters in the data set.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndecay.rate\n\n        \nthis is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used\n\n        \n0.01\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThis is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis.\n\n        \n\n        \nDOUBLE\nFLOAT\nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \neuclideanDistanceToClosestCentroid\n\n        \nRepresents the Euclidean distance between the current data point and the closest centroid.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nclosestCentroidCoordinate\n\n        \nThis is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;\n\n\n\n\nThis is an example where user doesnt give the decay rate so the default value will be used\n\n\n\nupdatePerceptronClassifier \n(Stream Processor)\n\n\nThis extension builds/updates a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:updatePerceptronClassifier(\nSTRING\n model.name, \nBOOL|STRING\n model.label, \nDOUBLE\n learning.rate, \nDOUBLE|INT\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built/updated.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.label\n\n        \nThe attribute of the label or the class of the dataset.\n\n        \n\n        \nBOOL\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the Perceptron algorithm.\n\n        \n0.1\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nfeatureWeight\n\n        \nWeight of the \nfeature.name\n of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a default \n0.1\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. The updated weights of the model are appended to the outputStream.\n\n\n\nperceptronClassifier \n(Stream Processor)\n\n\nThis extension predicts using a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:perceptronClassifier(\nSTRING\n model.name, \nDOUBLE\n model.bias, \nDOUBLE\n model.threshold, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.bias\n\n        \nThe bias of the Perceptron algorithm.\n\n        \n0.0\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.threshold\n\n        \nThe threshold that separates the two classes. The value specified must be between zero and one.\n\n        \n The output is a probability.\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThe features of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted value (\ntrue/false\n)\n\n        \nBOOL\n\n    \n\n    \n\n        \nconfidenceLevel\n\n        \nThe probability of the prediction\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias and a \n0.5\n threshold learning rate to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted label (\ntrue/false\n) is emitted to the \nOutputStream\n streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The prediction(\ntrue/false\n) is emitted to the \nOutputStream\nstream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE 3\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a default 0.0 bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, and \nattribute_2\n. The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).", 
            "title": "1.0.7"
        }, 
        {
            "location": "/api/1.0.7/#api-docs-v107", 
            "text": "", 
            "title": "API Docs - v1.0.7"
        }, 
        {
            "location": "/api/1.0.7/#streamingml", 
            "text": "", 
            "title": "Streamingml"
        }, 
        {
            "location": "/api/1.0.7/#kmeansminibatch-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.).   Syntax  streamingml:kMeansMiniBatch( INT  no.of.clusters,  DOUBLE  decay.rate,  INT  maximum.iterations,  INT  no.of.events.to.retrain,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         maximum.iterations \n         Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change \n         50 \n         INT \n         Yes \n         No \n     \n     \n         no.of.events.to.retrain \n         number of events to recalculate cluster centers.  \n         20 \n         INT \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansMiniBatch(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user has not specified hyper params. So default values will be used.", 
            "title": "kMeansMiniBatch (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.7/#kmeansincremental-stream-processor", 
            "text": "Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm   Syntax  streamingml:kMeansIncremental( INT  no.of.clusters,  DOUBLE  decay.rate,  DOUBLE|FLOAT|INT|LONG  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         no.of.clusters \n         The assumed number of natural clusters in the data set. \n         \n         INT \n         No \n         No \n     \n     \n         decay.rate \n         this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used \n         0.01 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. \n         \n         DOUBLE FLOAT INT LONG \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         euclideanDistanceToClosestCentroid \n         Represents the Euclidean distance between the current data point and the closest centroid. \n         DOUBLE \n     \n     \n         closestCentroidCoordinate \n         This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, 0.2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start.  EXAMPLE 2  define stream InputStream (x double, y double);\n@info(name = 'query1')\nfrom InputStream#streamingml:kMeansIncremental(2, x, y)\nselect closestCentroidCoordinate1, closestCentroidCoordinate2, x, y\ninsert into OutputStream;  This is an example where user doesnt give the decay rate so the default value will be used", 
            "title": "kMeansIncremental (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.7/#updateperceptronclassifier-stream-processor", 
            "text": "This extension builds/updates a linear binary classification Perceptron model.  Syntax  streamingml:updatePerceptronClassifier( STRING  model.name,  BOOL|STRING  model.label,  DOUBLE  learning.rate,  DOUBLE|INT  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built/updated. \n         \n         STRING \n         No \n         No \n     \n     \n         model.label \n         The attribute of the label or the class of the dataset. \n         \n         BOOL STRING \n         No \n         No \n     \n     \n         learning.rate \n         The learning rate of the Perceptron algorithm. \n         0.1 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         featureWeight \n         Weight of the  feature.name  of the model. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream.  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a default  0.1  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "updatePerceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.7/#perceptronclassifier-stream-processor", 
            "text": "This extension predicts using a linear binary classification Perceptron model.  Syntax  streamingml:perceptronClassifier( STRING  model.name,  DOUBLE  model.bias,  DOUBLE  model.threshold,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used. \n         \n         STRING \n         No \n         No \n     \n     \n         model.bias \n         The bias of the Perceptron algorithm. \n         0.0 \n         DOUBLE \n         No \n         No \n     \n     \n         model.threshold \n         The threshold that separates the two classes. The value specified must be between zero and one. \n          The output is a probability. \n         DOUBLE \n         No \n         No \n     \n     \n         model.features \n         The features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted value ( true/false ) \n         BOOL \n     \n     \n         confidenceLevel \n         The probability of the prediction \n         DOUBLE \n       Examples  EXAMPLE 1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias and a  0.5  threshold learning rate to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted label ( true/false ) is emitted to the  OutputStream  streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The prediction( true/false ) is emitted to the  OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE 3  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a default 0.0 bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 , and  attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).", 
            "title": "perceptronClassifier (Stream Processor)"
        }, 
        {
            "location": "/license/", 
            "text": "Copyright (c) 2019 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \nLicense\n shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \nLicensor\n shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \nLegal Entity\n shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \ncontrol\n means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \nSource\n form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \nObject\n form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \nWork\n shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \nDerivative Works\n shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \nContribution\n shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \nsubmitted\n\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \nNot a Contribution.\n\n\n   \nContributor\n shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \nNOTICE\n text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }
    ]
}